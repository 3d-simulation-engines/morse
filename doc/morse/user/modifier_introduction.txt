===== Modifiers =====

Modifiers affect directly the data employed by sensors and actuators, and are specific to the data used by the components. Just like middlewares, they must implement a method called ''register_component'' that should add the corresponding function to the component's action list.

===== List of existing modifiers =====

  * [[morse:user:modifiers:utm | UTM conversion]]
  * [[morse:user:modifiers:ned | NED conversion]]
  * [[morse:user:modifiers:json | JSON encoding/decoding]]
  * [[morse:user:modifiers:gps_noise | GPS noise]]

===== Linking a modifier in a scene =====

To be able to use a modifier inside of a scene, it is necessary to link the Empty object from the corresponding Blender file. This process is identical to the one used for middlewares, as explained in the [[tutorial | basic tutorial]], together with an explanation on how to configure the components to call middleware functions.

Binding a component to use a modifier is done in the file ''component_config.py'' that should be part of every MORSE scenario file. In that file, the dictionary ''component_modifier'' lists the components and the modifiers they will use to export/import their data. The unique names of the components are the keys of the dictionary, and the values are lists. Each list will contain as many items as modifiers associated to the component, and each element is also a list. In these internal lists, the first element is the name of the modifier Empty object in the scene, and the second is the modifier method that should be called by the component to alter its data. Here is an example of the ''component_modifier'' dictionary:

<code python>
component_modifier = {
	"GPS": [ ["NED", "blender_to_ned"], ["UTM", "blender_to_utm"] ],
	"Motion_Controller": [ ["NED", "ned_to_blender"], ["UTM", "utm_to_blender"] ],
	"Thermometer": [ ["Json", "json_encode"] ],
	}
</code>

===== Creating a new modifier =====

The concept of a modifier is relatively simple. Their only function is to change the data stored in variables in the corresponding component, by using the concept of [[hooks]]. Creating a new modifier consists mainly of writing the Python script that will alter the data. The modifier should only work on the ''modified_data'' array of a MORSE component, and it is important to ensure the fields of the array are maintained with the same order and data type.
