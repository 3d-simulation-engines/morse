#! /usr/bin/env python
"""
This tools import various components of MORSE (currently, the sensors and actuators)
and generates a set of documentation in RST format based on the Python source.

It generates doc for:
    - the component itself, based on the component class docstring,
    - the data fields exposed by the components and created with add_data,
    - the configurable parameters created with add_property
    - the services exported by the conmponent.
"""

from morse.actuators import armature, \
                            destination,       \
                            force_torque,      \
                            gripper,           \
                            light,             \
                            keyboard,          \
                            mocap_control,     \
                            orientation,       \
                            pa_10,             \
                            ptu,               \
                            rotorcraft_attitude, \
                            rotorcraft_waypoint, \
                            stabilized_quadrotor,\
                            steer_force,        \
                            teleport,           \
                            v_omega,           \
                            v_omega_diff_drive,\
                            waypoint,          \
                            xy_omega

from morse.sensors import accelerometer, \
                          armature_pose, \
                          battery,   \
                          camera,    \
                          gps,       \
                          gyroscope, \
                          human_posture, \
                          imu,       \
                          laserscanner, \
                          odometry,  \
                          pose,      \
                          proximity, \
                          ptu_posture, \
                          semantic_camera, \
                          thermometer, \
                          video_camera

import sys, os
import fnmatch

from morse.core.actuator import Actuator
from morse.core.sensor import Sensor


PREFIX = "."
MEDIA_PATH = "../../media"

# documentation of special parameters
special_doc = {}

def underline(text, char = '='):
    return text + '\n' + (char * len(text) + '\n')

def insert_image(name):
    matches = []
    for root, dirnames, filenames in os.walk(MEDIA_PATH):
      for filename in fnmatch.filter(filenames, '%s.png' % name):
            matches.append(os.path.join(root, filename))

    if matches:
        file = matches[0]
        print("Found image %s for the component %s" % (file, name))
        # take the first file found
        return ".. image:: ../%s\n  :align: center\n  :width: 600\n\n" % file

    return ""

def parse_docstring(doc):
    """ Parses the doc string, and return the doc without :param *: or :return:
    but with a list of params, return values and their associated doc.

    Also replace known keywords by hyperlinks.
    Also replace :see: by 'See also:'
    """

    # Try to 'safely' remove leading spaces introduced by natural Python
    # docstring formatting. We can not simply strip leading withspaces,
    # because they may be significant for rst (like in ..note:)
    orig = doc.split('\n')
    if (orig[0].strip()):
        print("XXX Invalid docstring %s" % doc)
        return (doc, None, None)

    new = [""]
    
    # Try to determine indentation level reading number of space on the
    # first line

    trailing_space = 0
    for i, c in enumerate(orig[1]):
        if c != ' ':
            trailing_space = i
            break

    for l in orig[1:]:
        new.append(l[trailing_space:])

    doc = "\n".join(new)
    doc.replace(":see:", "'''\nSee also:'''")
    r = doc.split(":param ", 1)
    doc = r[0]
    paramsdoc = None

    if len(r) == 1:
        parts = doc.split(":return", 1)
        if len(parts) == 2:
            doc = parts[0]
            returndoc = parts[1].split(':', 1)[1]
            returndoc = returndoc.replace("\n", " ")
            return (doc, None, returndoc)
        else:
            return (doc, None, None)
    else:
        parts= r[1].split(":return", 1)

    returndoc = None
    paramsdoc = parts[0].split(":param ")

    paramsdoc = [param.replace("\n", " ").split(':', 1) for param in paramsdoc]
    paramsdoc = [[x,y.strip()] for x, y in paramsdoc]

    if len(parts) == 2:
        returndoc = parts[1].split(':', 1)[1]
        returndoc = returndoc.replace("\n", " ")


    return (doc, paramsdoc,returndoc)

components = {}

m = sys.modules[__name__]

# First, retreive components classes
for module in [getattr(m, fn) for fn in dir(m)]:
    for component in [getattr(module, fn) for fn in dir(module)]:

        try:
            name = component.__name__
            ctype = None

            if Actuator in component.mro() and name != 'Actuator':
                print("Found actuator " + name)
                ctype = 'actuator'
                
            if Sensor in component.mro() and name != 'Sensor':
                print("Found sensor " + name)
                ctype = 'sensor'

            if not ctype:
                continue

            if hasattr(component, '_name'):
                name = getattr(component, '_name')

            if hasattr(component, '_short_desc'):
                desc = getattr(component, '_short_desc')
            else:
                desc = ""

            components[name] = {'object': component, 
                                'type': ctype, 
                                'desc': desc, 
                                'module': module,
                                'doc': component.__doc__}

        except TypeError: # .mro() not defined => not a class => not a component
            pass
        except AttributeError: # .mro() not defined => not a class => not a component
            pass

# Extract data fields
for name, props in components.items():
    c = props['object'] # component class
    if hasattr(c, "_data_fields"):
            print("Found datafields '" + str(c._data_fields) + "' in component " + name)
            components[name]['data_fields'] = c._data_fields

# Extract properties
for name, props in components.items():
    c = props['object'] # component class
    if hasattr(c, "_properties"):
            print("Found properties '" + str(c._properties) + "' in component " + name)
            components[name]['properties'] = c._properties

# Then, extract services
for name, props in components.items():
    c = props['object'] # component class
    services = {}
    for fn in [getattr(c, fn) for fn in dir(c)]:
        if hasattr(fn, "_morse_service"):
            print("Found service '" + fn.__name__ + "' in component " + name)

            services[fn.__name__] = {'async': fn._morse_service_is_async, 
                                     'doc': fn.__doc__}

    components[name]['services'] = services


# Finally, generate doc
def print_files(out, name, props):
    title = "Associated files"
    out.write(underline(title, '-') + '\n')

    module_name = components[name]['module'].__name__.split('.')[-1]

    out.write("    - `Source code <../../_modules/" +
              components[name]['module'].__name__.replace('.', '/') +
              ".html>`_\n")
    out.write("    - `Unit-test <../../_modules/base/" +
                module_name + "_testing.html>`_\n")

    out.write("\n\n")

def print_data(out, name, props):
        title = "Exported data"
        out.write(underline(title, '-') + '\n')

        try:
            prop = props['data_fields']
        except KeyError:
            out.write("No data field documented (see above for possible notes).\n\n")
            return

        for name, prop in prop.items():
            out.write('- ``' + name + '`` (' + (prop[1] + ', ' if prop[1] else '' ) + 'initial value: ``' + str(prop[0]) + '``): ' + prop[2] + "\n")

        out.write("\n\n")

def print_properties(out, name, props):
        title = "Configuration parameters for " + name
        out.write(underline(title, '-') + '\n')

        try:
            prop = props['properties']
        except KeyError:
            out.write("No configurable parameter.\n\n")
            return


        for name, prop in prop.items():
            out.write('- ``' + name + '`` (' + (prop[1] + ', ' if prop[1] else '' ) + 'default: ``' + str(prop[0]) + '``): ' + prop[2] + "\n")

        out.write("\n\n")

def print_services(out, name, props):
        title = "Services for " + name
        out.write(underline(title, '-') + '\n')

        services = props['services']

        for name, serv in services.items():
            out.write('- ``' + name + '(')

            doc = params = returndoc = None

            if serv['doc']:
                doc, params, returndoc = parse_docstring(serv['doc'])

            if params:
                out.write(", ".join([p for p,d in params]))

            if serv['async']:
                out.write(')`` (non blocking): ')
            else:
                out.write(')`` (blocking): ')

            if doc:
                out.write(doc.replace("\n", "\n    "))
                if params:
                    out.write("\n    - Parameters\n")
                    for p, d in params:
                        out.write("         - ``" + p + "``: " + d + "\n")
                if returndoc:
                    out.write("\n    - Return value\n")
                    out.write("        " + returndoc)
                    out.write("\n")
            else:
                out.write("\n    (no documentation yet)")
            out.write("\n")

        out.write("\n\n")



if not os.path.exists(PREFIX):
        os.makedirs(PREFIX)

if not os.path.exists(os.path.join(PREFIX, 'actuators')):
        os.makedirs(os.path.join(PREFIX, 'actuators'))
if not os.path.exists(os.path.join(PREFIX, 'sensors')):
        os.makedirs(os.path.join(PREFIX, 'sensors'))


for name, props in components.items():
    module = (props['object'].__module__.split('.'))[-1]
    with open(os.path.join(PREFIX, props['type'] + 's', module + ".rst"), 'w') as out:
        out.write(underline(name) + '\n')

        # if an image if available, use it
        out.write(insert_image(module))

        if props['desc']:
            out.write("\n**" + props['desc'] + "**\n\n")
        
        out.write(parse_docstring(props['doc'])[0] + "\n\n")

        print_files(out, name, props)
        print_data(out, name, props)
        print_services(out, name, props)
        print_properties(out, name, props)

        out.write('\n\n*(This page has been auto-generated from MORSE module %s.)*\n' % (props['object'].__module__) )
