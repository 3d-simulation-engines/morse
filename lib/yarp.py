# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _yarp
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _yarp.PySwigIterator_value(*args)
    def incr(*args): return _yarp.PySwigIterator_incr(*args)
    def decr(*args): return _yarp.PySwigIterator_decr(*args)
    def distance(*args): return _yarp.PySwigIterator_distance(*args)
    def equal(*args): return _yarp.PySwigIterator_equal(*args)
    def copy(*args): return _yarp.PySwigIterator_copy(*args)
    def next(*args): return _yarp.PySwigIterator_next(*args)
    def previous(*args): return _yarp.PySwigIterator_previous(*args)
    def advance(*args): return _yarp.PySwigIterator_advance(*args)
    def __eq__(*args): return _yarp.PySwigIterator___eq__(*args)
    def __ne__(*args): return _yarp.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _yarp.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _yarp.PySwigIterator___isub__(*args)
    def __add__(*args): return _yarp.PySwigIterator___add__(*args)
    def __sub__(*args): return _yarp.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _yarp.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class ConstString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstString, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_ConstString
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _yarp.new_ConstString(*args)
        try: self.this.append(this)
        except: self.this = this
    def c_str(*args): return _yarp.ConstString_c_str(*args)
    def toString(*args): return _yarp.ConstString_toString(*args)
    def isEqual(*args): return _yarp.ConstString_isEqual(*args)
    def notEqual(*args): return _yarp.ConstString_notEqual(*args)
    def __add__(*args): return _yarp.ConstString___add__(*args)
    def length(*args): return _yarp.ConstString_length(*args)
ConstString_swigregister = _yarp.ConstString_swigregister
ConstString_swigregister(ConstString)

class PortInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yarp.new_PortInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    PORTINFO_NULL = _yarp.PortInfo_PORTINFO_NULL
    PORTINFO_CONNECTION = _yarp.PortInfo_PORTINFO_CONNECTION
    PORTINFO_MISC = _yarp.PortInfo_PORTINFO_MISC
    __swig_setmethods__["tag"] = _yarp.PortInfo_tag_set
    __swig_getmethods__["tag"] = _yarp.PortInfo_tag_get
    if _newclass:tag = _swig_property(_yarp.PortInfo_tag_get, _yarp.PortInfo_tag_set)
    __swig_setmethods__["incoming"] = _yarp.PortInfo_incoming_set
    __swig_getmethods__["incoming"] = _yarp.PortInfo_incoming_get
    if _newclass:incoming = _swig_property(_yarp.PortInfo_incoming_get, _yarp.PortInfo_incoming_set)
    __swig_setmethods__["created"] = _yarp.PortInfo_created_set
    __swig_getmethods__["created"] = _yarp.PortInfo_created_get
    if _newclass:created = _swig_property(_yarp.PortInfo_created_get, _yarp.PortInfo_created_set)
    __swig_setmethods__["portName"] = _yarp.PortInfo_portName_set
    __swig_getmethods__["portName"] = _yarp.PortInfo_portName_get
    if _newclass:portName = _swig_property(_yarp.PortInfo_portName_get, _yarp.PortInfo_portName_set)
    __swig_setmethods__["sourceName"] = _yarp.PortInfo_sourceName_set
    __swig_getmethods__["sourceName"] = _yarp.PortInfo_sourceName_get
    if _newclass:sourceName = _swig_property(_yarp.PortInfo_sourceName_get, _yarp.PortInfo_sourceName_set)
    __swig_setmethods__["targetName"] = _yarp.PortInfo_targetName_set
    __swig_getmethods__["targetName"] = _yarp.PortInfo_targetName_get
    if _newclass:targetName = _swig_property(_yarp.PortInfo_targetName_get, _yarp.PortInfo_targetName_set)
    __swig_setmethods__["carrierName"] = _yarp.PortInfo_carrierName_set
    __swig_getmethods__["carrierName"] = _yarp.PortInfo_carrierName_get
    if _newclass:carrierName = _swig_property(_yarp.PortInfo_carrierName_get, _yarp.PortInfo_carrierName_set)
    __swig_setmethods__["message"] = _yarp.PortInfo_message_set
    __swig_getmethods__["message"] = _yarp.PortInfo_message_get
    if _newclass:message = _swig_property(_yarp.PortInfo_message_get, _yarp.PortInfo_message_set)
    __swig_destroy__ = _yarp.delete_PortInfo
    __del__ = lambda self : None;
PortInfo_swigregister = _yarp.PortInfo_swigregister
PortInfo_swigregister(PortInfo)

class PortReport(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortReport, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortReport, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_PortReport
    __del__ = lambda self : None;
    def report(*args): return _yarp.PortReport_report(*args)
PortReport_swigregister = _yarp.PortReport_swigregister
PortReport_swigregister(PortReport)

class Contact(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contact, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Contact, name)
    __repr__ = _swig_repr
    __swig_getmethods__["empty"] = lambda x: _yarp.Contact_empty
    if _newclass:empty = staticmethod(_yarp.Contact_empty)
    __swig_getmethods__["invalid"] = lambda x: _yarp.Contact_invalid
    if _newclass:invalid = staticmethod(_yarp.Contact_invalid)
    __swig_getmethods__["byName"] = lambda x: _yarp.Contact_byName
    if _newclass:byName = staticmethod(_yarp.Contact_byName)
    __swig_getmethods__["byCarrier"] = lambda x: _yarp.Contact_byCarrier
    if _newclass:byCarrier = staticmethod(_yarp.Contact_byCarrier)
    __swig_getmethods__["byConfig"] = lambda x: _yarp.Contact_byConfig
    if _newclass:byConfig = staticmethod(_yarp.Contact_byConfig)
    def addCarrier(*args): return _yarp.Contact_addCarrier(*args)
    __swig_getmethods__["bySocket"] = lambda x: _yarp.Contact_bySocket
    if _newclass:bySocket = staticmethod(_yarp.Contact_bySocket)
    def addSocket(*args): return _yarp.Contact_addSocket(*args)
    __swig_destroy__ = _yarp.delete_Contact
    __del__ = lambda self : None;
    def getName(*args): return _yarp.Contact_getName(*args)
    def getHost(*args): return _yarp.Contact_getHost(*args)
    def getCarrier(*args): return _yarp.Contact_getCarrier(*args)
    def getPort(*args): return _yarp.Contact_getPort(*args)
    def toString_c(*args): return _yarp.Contact_toString_c(*args)
    def isValid(*args): return _yarp.Contact_isValid(*args)
    def __init__(self, *args): 
        this = _yarp.new_Contact(*args)
        try: self.this.append(this)
        except: self.this = this
Contact_swigregister = _yarp.Contact_swigregister
Contact_swigregister(Contact)
Contact_empty = _yarp.Contact_empty
Contact_invalid = _yarp.Contact_invalid
Contact_byName = _yarp.Contact_byName
Contact_byCarrier = _yarp.Contact_byCarrier
Contact_byConfig = _yarp.Contact_byConfig
Contact_bySocket = _yarp.Contact_bySocket

class ConnectionReader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConnectionReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConnectionReader, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_ConnectionReader
    __del__ = lambda self : None;
    def expectBlock(*args): return _yarp.ConnectionReader_expectBlock(*args)
    def expectText(*args): return _yarp.ConnectionReader_expectText(*args)
    def expectInt(*args): return _yarp.ConnectionReader_expectInt(*args)
    def expectDouble(*args): return _yarp.ConnectionReader_expectDouble(*args)
    def isTextMode(*args): return _yarp.ConnectionReader_isTextMode(*args)
    def convertTextMode(*args): return _yarp.ConnectionReader_convertTextMode(*args)
    def getSize(*args): return _yarp.ConnectionReader_getSize(*args)
    def getWriter(*args): return _yarp.ConnectionReader_getWriter(*args)
    def getReference(*args): return _yarp.ConnectionReader_getReference(*args)
    def getRemoteContact(*args): return _yarp.ConnectionReader_getRemoteContact(*args)
    def getLocalContact(*args): return _yarp.ConnectionReader_getLocalContact(*args)
    def isValid(*args): return _yarp.ConnectionReader_isValid(*args)
    def isActive(*args): return _yarp.ConnectionReader_isActive(*args)
    def isError(*args): return _yarp.ConnectionReader_isError(*args)
ConnectionReader_swigregister = _yarp.ConnectionReader_swigregister
ConnectionReader_swigregister(ConnectionReader)

class ConnectionWriter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConnectionWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConnectionWriter, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_ConnectionWriter
    __del__ = lambda self : None;
    def appendBlock(*args): return _yarp.ConnectionWriter_appendBlock(*args)
    def appendInt(*args): return _yarp.ConnectionWriter_appendInt(*args)
    def appendDouble(*args): return _yarp.ConnectionWriter_appendDouble(*args)
    def appendString(*args): return _yarp.ConnectionWriter_appendString(*args)
    def appendExternalBlock(*args): return _yarp.ConnectionWriter_appendExternalBlock(*args)
    def isTextMode(*args): return _yarp.ConnectionWriter_isTextMode(*args)
    def declareSizes(*args): return _yarp.ConnectionWriter_declareSizes(*args)
    def setReplyHandler(*args): return _yarp.ConnectionWriter_setReplyHandler(*args)
    def setReference(*args): return _yarp.ConnectionWriter_setReference(*args)
    def convertTextMode(*args): return _yarp.ConnectionWriter_convertTextMode(*args)
    def isValid(*args): return _yarp.ConnectionWriter_isValid(*args)
    def isActive(*args): return _yarp.ConnectionWriter_isActive(*args)
    def isError(*args): return _yarp.ConnectionWriter_isError(*args)
ConnectionWriter_swigregister = _yarp.ConnectionWriter_swigregister
ConnectionWriter_swigregister(ConnectionWriter)

class PortReader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortReader, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_PortReader
    __del__ = lambda self : None;
PortReader_swigregister = _yarp.PortReader_swigregister
PortReader_swigregister(PortReader)

class PortWriter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortWriter, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_PortWriter
    __del__ = lambda self : None;
    def write(*args): return _yarp.PortWriter_write(*args)
    def onCompletion(*args): return _yarp.PortWriter_onCompletion(*args)
    def onCommencement(*args): return _yarp.PortWriter_onCommencement(*args)
PortWriter_swigregister = _yarp.PortWriter_swigregister
PortWriter_swigregister(PortWriter)

class Portable(PortReader,PortWriter):
    __swig_setmethods__ = {}
    for _s in [PortReader,PortWriter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Portable, name, value)
    __swig_getmethods__ = {}
    for _s in [PortReader,PortWriter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Portable, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def write(*args): return _yarp.Portable_write(*args)
    __swig_destroy__ = _yarp.delete_Portable
    __del__ = lambda self : None;
Portable_swigregister = _yarp.Portable_swigregister
Portable_swigregister(Portable)

class SearchReport(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SearchReport, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SearchReport, name)
    __repr__ = _swig_repr
    __swig_setmethods__["key"] = _yarp.SearchReport_key_set
    __swig_getmethods__["key"] = _yarp.SearchReport_key_get
    if _newclass:key = _swig_property(_yarp.SearchReport_key_get, _yarp.SearchReport_key_set)
    __swig_setmethods__["value"] = _yarp.SearchReport_value_set
    __swig_getmethods__["value"] = _yarp.SearchReport_value_get
    if _newclass:value = _swig_property(_yarp.SearchReport_value_get, _yarp.SearchReport_value_set)
    __swig_setmethods__["isFound"] = _yarp.SearchReport_isFound_set
    __swig_getmethods__["isFound"] = _yarp.SearchReport_isFound_get
    if _newclass:isFound = _swig_property(_yarp.SearchReport_isFound_get, _yarp.SearchReport_isFound_set)
    __swig_setmethods__["isGroup"] = _yarp.SearchReport_isGroup_set
    __swig_getmethods__["isGroup"] = _yarp.SearchReport_isGroup_get
    if _newclass:isGroup = _swig_property(_yarp.SearchReport_isGroup_get, _yarp.SearchReport_isGroup_set)
    __swig_setmethods__["isComment"] = _yarp.SearchReport_isComment_set
    __swig_getmethods__["isComment"] = _yarp.SearchReport_isComment_get
    if _newclass:isComment = _swig_property(_yarp.SearchReport_isComment_get, _yarp.SearchReport_isComment_set)
    __swig_setmethods__["isDefault"] = _yarp.SearchReport_isDefault_set
    __swig_getmethods__["isDefault"] = _yarp.SearchReport_isDefault_get
    if _newclass:isDefault = _swig_property(_yarp.SearchReport_isDefault_get, _yarp.SearchReport_isDefault_set)
    def __init__(self, *args): 
        this = _yarp.new_SearchReport(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_SearchReport
    __del__ = lambda self : None;
SearchReport_swigregister = _yarp.SearchReport_swigregister
SearchReport_swigregister(SearchReport)

class SearchMonitor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SearchMonitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SearchMonitor, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_SearchMonitor
    __del__ = lambda self : None;
    def report(*args): return _yarp.SearchMonitor_report(*args)
SearchMonitor_swigregister = _yarp.SearchMonitor_swigregister
SearchMonitor_swigregister(SearchMonitor)

class Searchable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Searchable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Searchable, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_Searchable
    __del__ = lambda self : None;
    def find(*args): return _yarp.Searchable_find(*args)
    def findGroup(*args): return _yarp.Searchable_findGroup(*args)
    def check(*args): return _yarp.Searchable_check(*args)
    def isNull(*args): return _yarp.Searchable_isNull(*args)
    def toString_c(*args): return _yarp.Searchable_toString_c(*args)
    def setMonitor(*args): return _yarp.Searchable_setMonitor(*args)
    def getMonitor(*args): return _yarp.Searchable_getMonitor(*args)
    def getContext(*args): return _yarp.Searchable_getContext(*args)
    def reportToMonitor(*args): return _yarp.Searchable_reportToMonitor(*args)
Searchable_swigregister = _yarp.Searchable_swigregister
Searchable_swigregister(Searchable)

class Value(Portable,Searchable):
    __swig_setmethods__ = {}
    for _s in [Portable,Searchable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Value, name, value)
    __swig_getmethods__ = {}
    for _s in [Portable,Searchable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Value, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yarp.new_Value(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_Value
    __del__ = lambda self : None;
    def isInt(*args): return _yarp.Value_isInt(*args)
    def isString(*args): return _yarp.Value_isString(*args)
    def isDouble(*args): return _yarp.Value_isDouble(*args)
    def isList(*args): return _yarp.Value_isList(*args)
    def isVocab(*args): return _yarp.Value_isVocab(*args)
    def isBlob(*args): return _yarp.Value_isBlob(*args)
    def asInt(*args): return _yarp.Value_asInt(*args)
    def asVocab(*args): return _yarp.Value_asVocab(*args)
    def asDouble(*args): return _yarp.Value_asDouble(*args)
    def asString(*args): return _yarp.Value_asString(*args)
    def asList(*args): return _yarp.Value_asList(*args)
    def asBlob(*args): return _yarp.Value_asBlob(*args)
    def asBlobLength(*args): return _yarp.Value_asBlobLength(*args)
    def write(*args): return _yarp.Value_write(*args)
    def check(*args): return _yarp.Value_check(*args)
    def find(*args): return _yarp.Value_find(*args)
    def findGroup(*args): return _yarp.Value_findGroup(*args)
    def isEqual(*args): return _yarp.Value_isEqual(*args)
    def notEqual(*args): return _yarp.Value_notEqual(*args)
    def fromString(*args): return _yarp.Value_fromString(*args)
    def toString_c(*args): return _yarp.Value_toString_c(*args)
    def create(*args): return _yarp.Value_create(*args)
    def clone(*args): return _yarp.Value_clone(*args)
    def getCode(*args): return _yarp.Value_getCode(*args)
    __swig_getmethods__["makeInt"] = lambda x: _yarp.Value_makeInt
    if _newclass:makeInt = staticmethod(_yarp.Value_makeInt)
    __swig_getmethods__["makeDouble"] = lambda x: _yarp.Value_makeDouble
    if _newclass:makeDouble = staticmethod(_yarp.Value_makeDouble)
    __swig_getmethods__["makeString"] = lambda x: _yarp.Value_makeString
    if _newclass:makeString = staticmethod(_yarp.Value_makeString)
    __swig_getmethods__["makeVocab"] = lambda x: _yarp.Value_makeVocab
    if _newclass:makeVocab = staticmethod(_yarp.Value_makeVocab)
    __swig_getmethods__["makeBlob"] = lambda x: _yarp.Value_makeBlob
    if _newclass:makeBlob = staticmethod(_yarp.Value_makeBlob)
    __swig_getmethods__["makeList"] = lambda x: _yarp.Value_makeList
    if _newclass:makeList = staticmethod(_yarp.Value_makeList)
    __swig_getmethods__["makeValue"] = lambda x: _yarp.Value_makeValue
    if _newclass:makeValue = staticmethod(_yarp.Value_makeValue)
    __swig_getmethods__["getNullValue"] = lambda x: _yarp.Value_getNullValue
    if _newclass:getNullValue = staticmethod(_yarp.Value_getNullValue)
    def toString(*args): return _yarp.Value_toString(*args)
Value_swigregister = _yarp.Value_swigregister
Value_swigregister(Value)
Value_makeInt = _yarp.Value_makeInt
Value_makeDouble = _yarp.Value_makeDouble
Value_makeString = _yarp.Value_makeString
Value_makeVocab = _yarp.Value_makeVocab
Value_makeBlob = _yarp.Value_makeBlob
Value_makeList = _yarp.Value_makeList
Value_makeValue = _yarp.Value_makeValue
Value_getNullValue = _yarp.Value_getNullValue

class Contactable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contactable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Contactable, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_Contactable
    __del__ = lambda self : None;
    def open(*args): return _yarp.Contactable_open(*args)
    def addOutput(*args): return _yarp.Contactable_addOutput(*args)
    def close(*args): return _yarp.Contactable_close(*args)
    def interrupt(*args): return _yarp.Contactable_interrupt(*args)
    def where(*args): return _yarp.Contactable_where(*args)
    def getName(*args): return _yarp.Contactable_getName(*args)
    def setEnvelope(*args): return _yarp.Contactable_setEnvelope(*args)
    def getEnvelope(*args): return _yarp.Contactable_getEnvelope(*args)
    def getInputCount(*args): return _yarp.Contactable_getInputCount(*args)
    def getOutputCount(*args): return _yarp.Contactable_getOutputCount(*args)
    def getReport(*args): return _yarp.Contactable_getReport(*args)
    def setReporter(*args): return _yarp.Contactable_setReporter(*args)
Contactable_swigregister = _yarp.Contactable_swigregister
Contactable_swigregister(Contactable)

class Network(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Network, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Network, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yarp.new_Network(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_Network
    __del__ = lambda self : None;
    __swig_getmethods__["connect"] = lambda x: _yarp.Network_connect
    if _newclass:connect = staticmethod(_yarp.Network_connect)
    __swig_getmethods__["disconnect"] = lambda x: _yarp.Network_disconnect
    if _newclass:disconnect = staticmethod(_yarp.Network_disconnect)
    __swig_getmethods__["isConnected"] = lambda x: _yarp.Network_isConnected
    if _newclass:isConnected = staticmethod(_yarp.Network_isConnected)
    __swig_getmethods__["sync"] = lambda x: _yarp.Network_sync
    if _newclass:sync = staticmethod(_yarp.Network_sync)
    __swig_getmethods__["main"] = lambda x: _yarp.Network_main
    if _newclass:main = staticmethod(_yarp.Network_main)
    __swig_getmethods__["init"] = lambda x: _yarp.Network_init
    if _newclass:init = staticmethod(_yarp.Network_init)
    __swig_getmethods__["fini"] = lambda x: _yarp.Network_fini
    if _newclass:fini = staticmethod(_yarp.Network_fini)
    __swig_getmethods__["assertion"] = lambda x: _yarp.Network_assertion
    if _newclass:assertion = staticmethod(_yarp.Network_assertion)
    __swig_getmethods__["queryName"] = lambda x: _yarp.Network_queryName
    if _newclass:queryName = staticmethod(_yarp.Network_queryName)
    __swig_getmethods__["registerName"] = lambda x: _yarp.Network_registerName
    if _newclass:registerName = staticmethod(_yarp.Network_registerName)
    __swig_getmethods__["registerContact"] = lambda x: _yarp.Network_registerContact
    if _newclass:registerContact = staticmethod(_yarp.Network_registerContact)
    __swig_getmethods__["unregisterName"] = lambda x: _yarp.Network_unregisterName
    if _newclass:unregisterName = staticmethod(_yarp.Network_unregisterName)
    __swig_getmethods__["unregisterContact"] = lambda x: _yarp.Network_unregisterContact
    if _newclass:unregisterContact = staticmethod(_yarp.Network_unregisterContact)
    __swig_getmethods__["setProperty"] = lambda x: _yarp.Network_setProperty
    if _newclass:setProperty = staticmethod(_yarp.Network_setProperty)
    __swig_getmethods__["getProperty"] = lambda x: _yarp.Network_getProperty
    if _newclass:getProperty = staticmethod(_yarp.Network_getProperty)
    __swig_getmethods__["getNameServerName"] = lambda x: _yarp.Network_getNameServerName
    if _newclass:getNameServerName = staticmethod(_yarp.Network_getNameServerName)
    __swig_getmethods__["setLocalMode"] = lambda x: _yarp.Network_setLocalMode
    if _newclass:setLocalMode = staticmethod(_yarp.Network_setLocalMode)
    __swig_getmethods__["readString"] = lambda x: _yarp.Network_readString
    if _newclass:readString = staticmethod(_yarp.Network_readString)
    __swig_getmethods__["write"] = lambda x: _yarp.Network_write
    if _newclass:write = staticmethod(_yarp.Network_write)
    __swig_getmethods__["checkNetwork"] = lambda x: _yarp.Network_checkNetwork
    if _newclass:checkNetwork = staticmethod(_yarp.Network_checkNetwork)
Network_swigregister = _yarp.Network_swigregister
Network_swigregister(Network)
Network_connect = _yarp.Network_connect
Network_disconnect = _yarp.Network_disconnect
Network_isConnected = _yarp.Network_isConnected
Network_sync = _yarp.Network_sync
Network_main = _yarp.Network_main
Network_init = _yarp.Network_init
Network_fini = _yarp.Network_fini
Network_assertion = _yarp.Network_assertion
Network_queryName = _yarp.Network_queryName
Network_registerName = _yarp.Network_registerName
Network_registerContact = _yarp.Network_registerContact
Network_unregisterName = _yarp.Network_unregisterName
Network_unregisterContact = _yarp.Network_unregisterContact
Network_setProperty = _yarp.Network_setProperty
Network_getProperty = _yarp.Network_getProperty
Network_getNameServerName = _yarp.Network_getNameServerName
Network_setLocalMode = _yarp.Network_setLocalMode
Network_readString = _yarp.Network_readString
Network_write = _yarp.Network_write
Network_checkNetwork = _yarp.Network_checkNetwork

class PortReaderCreator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortReaderCreator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortReaderCreator, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_PortReaderCreator
    __del__ = lambda self : None;
    def create(*args): return _yarp.PortReaderCreator_create(*args)
PortReaderCreator_swigregister = _yarp.PortReaderCreator_swigregister
PortReaderCreator_swigregister(PortReaderCreator)

class Property(Searchable,Portable):
    __swig_setmethods__ = {}
    for _s in [Searchable,Portable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Property, name, value)
    __swig_getmethods__ = {}
    for _s in [Searchable,Portable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Property, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yarp.new_Property(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_Property
    __del__ = lambda self : None;
    def check(*args): return _yarp.Property_check(*args)
    def put(*args): return _yarp.Property_put(*args)
    def unput(*args): return _yarp.Property_unput(*args)
    def find(*args): return _yarp.Property_find(*args)
    def findGroup(*args): return _yarp.Property_findGroup(*args)
    def clear(*args): return _yarp.Property_clear(*args)
    def fromString(*args): return _yarp.Property_fromString(*args)
    def fromCommand(*args): return _yarp.Property_fromCommand(*args)
    def fromConfigFile(*args): return _yarp.Property_fromConfigFile(*args)
    def fromConfig(*args): return _yarp.Property_fromConfig(*args)
    def fromQuery(*args): return _yarp.Property_fromQuery(*args)
    def toString_c(*args): return _yarp.Property_toString_c(*args)
    def write(*args): return _yarp.Property_write(*args)
    def toString(*args): return _yarp.Property_toString(*args)
Property_swigregister = _yarp.Property_swigregister
Property_swigregister(Property)

class Port(Contactable):
    __swig_setmethods__ = {}
    for _s in [Contactable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Port, name, value)
    __swig_getmethods__ = {}
    for _s in [Contactable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Port, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yarp.new_Port(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_Port
    __del__ = lambda self : None;
    def addOutput(*args): return _yarp.Port_addOutput(*args)
    def close(*args): return _yarp.Port_close(*args)
    def interrupt(*args): return _yarp.Port_interrupt(*args)
    def where(*args): return _yarp.Port_where(*args)
    def read(*args): return _yarp.Port_read(*args)
    def reply(*args): return _yarp.Port_reply(*args)
    def setReader(*args): return _yarp.Port_setReader(*args)
    def setReaderCreator(*args): return _yarp.Port_setReaderCreator(*args)
    def enableBackgroundWrite(*args): return _yarp.Port_enableBackgroundWrite(*args)
    def isWriting(*args): return _yarp.Port_isWriting(*args)
    def setEnvelope(*args): return _yarp.Port_setEnvelope(*args)
    def getEnvelope(*args): return _yarp.Port_getEnvelope(*args)
    def getInputCount(*args): return _yarp.Port_getInputCount(*args)
    def getOutputCount(*args): return _yarp.Port_getOutputCount(*args)
    def getReport(*args): return _yarp.Port_getReport(*args)
    def setReporter(*args): return _yarp.Port_setReporter(*args)
    def setAdminMode(*args): return _yarp.Port_setAdminMode(*args)
    def write(*args): return _yarp.Port_write(*args)
Port_swigregister = _yarp.Port_swigregister
Port_swigregister(Port)

BOTTLE_TAG_INT = _yarp.BOTTLE_TAG_INT
BOTTLE_TAG_VOCAB = _yarp.BOTTLE_TAG_VOCAB
BOTTLE_TAG_DOUBLE = _yarp.BOTTLE_TAG_DOUBLE
BOTTLE_TAG_STRING = _yarp.BOTTLE_TAG_STRING
BOTTLE_TAG_BLOB = _yarp.BOTTLE_TAG_BLOB
BOTTLE_TAG_LIST = _yarp.BOTTLE_TAG_LIST
class Bottle(Portable,Searchable):
    __swig_setmethods__ = {}
    for _s in [Portable,Searchable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bottle, name, value)
    __swig_getmethods__ = {}
    for _s in [Portable,Searchable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bottle, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yarp.new_Bottle(*args)
        try: self.this.append(this)
        except: self.this = this
    def clear(*args): return _yarp.Bottle_clear(*args)
    def addInt(*args): return _yarp.Bottle_addInt(*args)
    def addVocab(*args): return _yarp.Bottle_addVocab(*args)
    def addDouble(*args): return _yarp.Bottle_addDouble(*args)
    def addString(*args): return _yarp.Bottle_addString(*args)
    def add(*args): return _yarp.Bottle_add(*args)
    def addList(*args): return _yarp.Bottle_addList(*args)
    def pop(*args): return _yarp.Bottle_pop(*args)
    def get(*args): return _yarp.Bottle_get(*args)
    def size(*args): return _yarp.Bottle_size(*args)
    def fromString(*args): return _yarp.Bottle_fromString(*args)
    def fromBinary(*args): return _yarp.Bottle_fromBinary(*args)
    def toBinary(*args): return _yarp.Bottle_toBinary(*args)
    def toString_c(*args): return _yarp.Bottle_toString_c(*args)
    def write(*args): return _yarp.Bottle_write(*args)
    def onCommencement(*args): return _yarp.Bottle_onCommencement(*args)
    def check(*args): return _yarp.Bottle_check(*args)
    def find(*args): return _yarp.Bottle_find(*args)
    def findGroup(*args): return _yarp.Bottle_findGroup(*args)
    __swig_destroy__ = _yarp.delete_Bottle
    __del__ = lambda self : None;
    def copy(*args): return _yarp.Bottle_copy(*args)
    __swig_getmethods__["getNullBottle"] = lambda x: _yarp.Bottle_getNullBottle
    if _newclass:getNullBottle = staticmethod(_yarp.Bottle_getNullBottle)
    def isEqual(*args): return _yarp.Bottle_isEqual(*args)
    def notEqual(*args): return _yarp.Bottle_notEqual(*args)
    def append(*args): return _yarp.Bottle_append(*args)
    def tail(*args): return _yarp.Bottle_tail(*args)
    def specialize(*args): return _yarp.Bottle_specialize(*args)
    def getSpecialization(*args): return _yarp.Bottle_getSpecialization(*args)
    def setNested(*args): return _yarp.Bottle_setNested(*args)
    def toString(*args): return _yarp.Bottle_toString(*args)
Bottle_swigregister = _yarp.Bottle_swigregister
Bottle_swigregister(Bottle)
Bottle_getNullBottle = _yarp.Bottle_getNullBottle

typedReaderMissingCallback = _yarp.typedReaderMissingCallback
class PortReaderBufferBaseCreator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortReaderBufferBaseCreator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortReaderBufferBaseCreator, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_PortReaderBufferBaseCreator
    __del__ = lambda self : None;
    def create(*args): return _yarp.PortReaderBufferBaseCreator_create(*args)
PortReaderBufferBaseCreator_swigregister = _yarp.PortReaderBufferBaseCreator_swigregister
PortReaderBufferBaseCreator_swigregister(PortReaderBufferBaseCreator)

class PortReaderBufferBase(PortReader):
    __swig_setmethods__ = {}
    for _s in [PortReader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortReaderBufferBase, name, value)
    __swig_getmethods__ = {}
    for _s in [PortReader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PortReaderBufferBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yarp.new_PortReaderBufferBase(*args)
        try: self.this.append(this)
        except: self.this = this
    def setCreator(*args): return _yarp.PortReaderBufferBase_setCreator(*args)
    def setReplier(*args): return _yarp.PortReaderBufferBase_setReplier(*args)
    __swig_destroy__ = _yarp.delete_PortReaderBufferBase
    __del__ = lambda self : None;
    def create(*args): return _yarp.PortReaderBufferBase_create(*args)
    def check(*args): return _yarp.PortReaderBufferBase_check(*args)
    def setAutoRelease(*args): return _yarp.PortReaderBufferBase_setAutoRelease(*args)
    def setPrune(*args): return _yarp.PortReaderBufferBase_setPrune(*args)
    def setAllowReuse(*args): return _yarp.PortReaderBufferBase_setAllowReuse(*args)
    def readBase(*args): return _yarp.PortReaderBufferBase_readBase(*args)
    def interrupt(*args): return _yarp.PortReaderBufferBase_interrupt(*args)
    def getMaxBuffer(*args): return _yarp.PortReaderBufferBase_getMaxBuffer(*args)
    def attachBase(*args): return _yarp.PortReaderBufferBase_attachBase(*args)
    def isClosed(*args): return _yarp.PortReaderBufferBase_isClosed(*args)
    def getName(*args): return _yarp.PortReaderBufferBase_getName(*args)
    def acceptObjectBase(*args): return _yarp.PortReaderBufferBase_acceptObjectBase(*args)
    def forgetObjectBase(*args): return _yarp.PortReaderBufferBase_forgetObjectBase(*args)
    def acquire(*args): return _yarp.PortReaderBufferBase_acquire(*args)
    def release(*args): return _yarp.PortReaderBufferBase_release(*args)
PortReaderBufferBase_swigregister = _yarp.PortReaderBufferBase_swigregister
PortReaderBufferBase_swigregister(PortReaderBufferBase)

class PortWriterBufferManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortWriterBufferManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortWriterBufferManager, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_PortWriterBufferManager
    __del__ = lambda self : None;
    def onCompletion(*args): return _yarp.PortWriterBufferManager_onCompletion(*args)
PortWriterBufferManager_swigregister = _yarp.PortWriterBufferManager_swigregister
PortWriterBufferManager_swigregister(PortWriterBufferManager)

class PortWriterWrapper(PortWriter):
    __swig_setmethods__ = {}
    for _s in [PortWriter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortWriterWrapper, name, value)
    __swig_getmethods__ = {}
    for _s in [PortWriter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PortWriterWrapper, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def getInternal(*args): return _yarp.PortWriterWrapper_getInternal(*args)
    __swig_destroy__ = _yarp.delete_PortWriterWrapper
    __del__ = lambda self : None;
PortWriterWrapper_swigregister = _yarp.PortWriterWrapper_swigregister
PortWriterWrapper_swigregister(PortWriterWrapper)

class PortWriterBufferBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortWriterBufferBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortWriterBufferBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_PortWriterBufferBase
    __del__ = lambda self : None;
    def create(*args): return _yarp.PortWriterBufferBase_create(*args)
    def getContent(*args): return _yarp.PortWriterBufferBase_getContent(*args)
    def getCount(*args): return _yarp.PortWriterBufferBase_getCount(*args)
    def attach(*args): return _yarp.PortWriterBufferBase_attach(*args)
    def write(*args): return _yarp.PortWriterBufferBase_write(*args)
PortWriterBufferBase_swigregister = _yarp.PortWriterBufferBase_swigregister
PortWriterBufferBase_swigregister(PortWriterBufferBase)

class Random(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Random, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Random, name)
    __repr__ = _swig_repr
    __swig_getmethods__["seed_c"] = lambda x: _yarp.Random_seed_c
    if _newclass:seed_c = staticmethod(_yarp.Random_seed_c)
    __swig_getmethods__["normal"] = lambda x: _yarp.Random_normal
    if _newclass:normal = staticmethod(_yarp.Random_normal)
    __swig_getmethods__["uniform"] = lambda x: _yarp.Random_uniform
    if _newclass:uniform = staticmethod(_yarp.Random_uniform)
    def __init__(self, *args): 
        this = _yarp.new_Random(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_Random
    __del__ = lambda self : None;
Random_swigregister = _yarp.Random_swigregister
Random_swigregister(Random)
Random_seed_c = _yarp.Random_seed_c
Random_normal = _yarp.Random_normal
Random_uniform = _yarp.Random_uniform

class Semaphore(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Semaphore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Semaphore, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yarp.new_Semaphore(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_Semaphore
    __del__ = lambda self : None;
    def wait(*args): return _yarp.Semaphore_wait(*args)
    def check(*args): return _yarp.Semaphore_check(*args)
    def post(*args): return _yarp.Semaphore_post(*args)
Semaphore_swigregister = _yarp.Semaphore_swigregister
Semaphore_swigregister(Semaphore)

class Thread(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Thread, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Thread, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_Thread
    __del__ = lambda self : None;
    def run(*args): return _yarp.Thread_run(*args)
    def onStop(*args): return _yarp.Thread_onStop(*args)
    def start(*args): return _yarp.Thread_start(*args)
    def stop(*args): return _yarp.Thread_stop(*args)
    def beforeStart(*args): return _yarp.Thread_beforeStart(*args)
    def afterStart(*args): return _yarp.Thread_afterStart(*args)
    def threadInit(*args): return _yarp.Thread_threadInit(*args)
    def threadRelease(*args): return _yarp.Thread_threadRelease(*args)
    def isStopping(*args): return _yarp.Thread_isStopping(*args)
    def isRunning(*args): return _yarp.Thread_isRunning(*args)
    def setOptions(*args): return _yarp.Thread_setOptions(*args)
    __swig_getmethods__["getCount"] = lambda x: _yarp.Thread_getCount
    if _newclass:getCount = staticmethod(_yarp.Thread_getCount)
    def getKey(*args): return _yarp.Thread_getKey(*args)
    def setPriority(*args): return _yarp.Thread_setPriority(*args)
    def getPriority(*args): return _yarp.Thread_getPriority(*args)
Thread_swigregister = _yarp.Thread_swigregister
Thread_swigregister(Thread)
Thread_getCount = _yarp.Thread_getCount

class Time(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Time, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Time, name)
    __repr__ = _swig_repr
    __swig_getmethods__["delay"] = lambda x: _yarp.Time_delay
    if _newclass:delay = staticmethod(_yarp.Time_delay)
    __swig_getmethods__["now"] = lambda x: _yarp.Time_now
    if _newclass:now = staticmethod(_yarp.Time_now)
    __swig_getmethods__["yield_c"] = lambda x: _yarp.Time_yield_c
    if _newclass:yield_c = staticmethod(_yarp.Time_yield_c)
    __swig_getmethods__["turboBoost"] = lambda x: _yarp.Time_turboBoost
    if _newclass:turboBoost = staticmethod(_yarp.Time_turboBoost)
    def __init__(self, *args): 
        this = _yarp.new_Time(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_Time
    __del__ = lambda self : None;
Time_swigregister = _yarp.Time_swigregister
Time_swigregister(Time)
Time_delay = _yarp.Time_delay
Time_now = _yarp.Time_now
Time_yield_c = _yarp.Time_yield_c
Time_turboBoost = _yarp.Time_turboBoost

class Image(Portable):
    __swig_setmethods__ = {}
    for _s in [Portable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image, name, value)
    __swig_getmethods__ = {}
    for _s in [Portable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Image, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yarp.new_Image(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_Image
    __del__ = lambda self : None;
    def copy(*args): return _yarp.Image_copy(*args)
    def width(*args): return _yarp.Image_width(*args)
    def height(*args): return _yarp.Image_height(*args)
    def getPixelSize(*args): return _yarp.Image_getPixelSize(*args)
    def getPixelCode(*args): return _yarp.Image_getPixelCode(*args)
    def getRowSize(*args): return _yarp.Image_getRowSize(*args)
    def getQuantum(*args): return _yarp.Image_getQuantum(*args)
    def getPadding(*args): return _yarp.Image_getPadding(*args)
    def getRow(*args): return _yarp.Image_getRow(*args)
    def getPixelAddress(*args): return _yarp.Image_getPixelAddress(*args)
    def isPixel(*args): return _yarp.Image_isPixel(*args)
    def zero(*args): return _yarp.Image_zero(*args)
    def resize(*args): return _yarp.Image_resize(*args)
    def getRawImage(*args): return _yarp.Image_getRawImage(*args)
    def getRawImageSize(*args): return _yarp.Image_getRawImageSize(*args)
    def getIplImage(*args): return _yarp.Image_getIplImage(*args)
    def wrapIplImage(*args): return _yarp.Image_wrapIplImage(*args)
    def write(*args): return _yarp.Image_write(*args)
    def setQuantum(*args): return _yarp.Image_setQuantum(*args)
    def topIsLowIndex(*args): return _yarp.Image_topIsLowIndex(*args)
    def setTopIsLowIndex(*args): return _yarp.Image_setTopIsLowIndex(*args)
    def getRowArray(*args): return _yarp.Image_getRowArray(*args)
    def setExternal(*args): return _yarp.Image_setExternal(*args)
Image_swigregister = _yarp.Image_swigregister
Image_swigregister(Image)

class FlexImage(Image):
    __swig_setmethods__ = {}
    for _s in [Image]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FlexImage, name, value)
    __swig_getmethods__ = {}
    for _s in [Image]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FlexImage, name)
    __repr__ = _swig_repr
    def setPixelCode(*args): return _yarp.FlexImage_setPixelCode(*args)
    def setPixelSize(*args): return _yarp.FlexImage_setPixelSize(*args)
    def setQuantum(*args): return _yarp.FlexImage_setQuantum(*args)
    def __init__(self, *args): 
        this = _yarp.new_FlexImage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_FlexImage
    __del__ = lambda self : None;
FlexImage_swigregister = _yarp.FlexImage_swigregister
FlexImage_swigregister(FlexImage)

VOCAB_PIXEL_INVALID = _yarp.VOCAB_PIXEL_INVALID
VOCAB_PIXEL_MONO = _yarp.VOCAB_PIXEL_MONO
VOCAB_PIXEL_MONO16 = _yarp.VOCAB_PIXEL_MONO16
VOCAB_PIXEL_RGB = _yarp.VOCAB_PIXEL_RGB
VOCAB_PIXEL_RGBA = _yarp.VOCAB_PIXEL_RGBA
VOCAB_PIXEL_BGRA = _yarp.VOCAB_PIXEL_BGRA
VOCAB_PIXEL_INT = _yarp.VOCAB_PIXEL_INT
VOCAB_PIXEL_HSV = _yarp.VOCAB_PIXEL_HSV
VOCAB_PIXEL_BGR = _yarp.VOCAB_PIXEL_BGR
VOCAB_PIXEL_MONO_SIGNED = _yarp.VOCAB_PIXEL_MONO_SIGNED
VOCAB_PIXEL_RGB_SIGNED = _yarp.VOCAB_PIXEL_RGB_SIGNED
VOCAB_PIXEL_RGB_INT = _yarp.VOCAB_PIXEL_RGB_INT
VOCAB_PIXEL_MONO_FLOAT = _yarp.VOCAB_PIXEL_MONO_FLOAT
VOCAB_PIXEL_RGB_FLOAT = _yarp.VOCAB_PIXEL_RGB_FLOAT
VOCAB_PIXEL_HSV_FLOAT = _yarp.VOCAB_PIXEL_HSV_FLOAT
class PixelRgb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelRgb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PixelRgb, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _yarp.PixelRgb_r_set
    __swig_getmethods__["r"] = _yarp.PixelRgb_r_get
    if _newclass:r = _swig_property(_yarp.PixelRgb_r_get, _yarp.PixelRgb_r_set)
    __swig_setmethods__["g"] = _yarp.PixelRgb_g_set
    __swig_getmethods__["g"] = _yarp.PixelRgb_g_get
    if _newclass:g = _swig_property(_yarp.PixelRgb_g_get, _yarp.PixelRgb_g_set)
    __swig_setmethods__["b"] = _yarp.PixelRgb_b_set
    __swig_getmethods__["b"] = _yarp.PixelRgb_b_get
    if _newclass:b = _swig_property(_yarp.PixelRgb_b_get, _yarp.PixelRgb_b_set)
    def __init__(self, *args): 
        this = _yarp.new_PixelRgb(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_PixelRgb
    __del__ = lambda self : None;
PixelRgb_swigregister = _yarp.PixelRgb_swigregister
PixelRgb_swigregister(PixelRgb)

class PixelRgba(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelRgba, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PixelRgba, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _yarp.PixelRgba_r_set
    __swig_getmethods__["r"] = _yarp.PixelRgba_r_get
    if _newclass:r = _swig_property(_yarp.PixelRgba_r_get, _yarp.PixelRgba_r_set)
    __swig_setmethods__["g"] = _yarp.PixelRgba_g_set
    __swig_getmethods__["g"] = _yarp.PixelRgba_g_get
    if _newclass:g = _swig_property(_yarp.PixelRgba_g_get, _yarp.PixelRgba_g_set)
    __swig_setmethods__["b"] = _yarp.PixelRgba_b_set
    __swig_getmethods__["b"] = _yarp.PixelRgba_b_get
    if _newclass:b = _swig_property(_yarp.PixelRgba_b_get, _yarp.PixelRgba_b_set)
    __swig_setmethods__["a"] = _yarp.PixelRgba_a_set
    __swig_getmethods__["a"] = _yarp.PixelRgba_a_get
    if _newclass:a = _swig_property(_yarp.PixelRgba_a_get, _yarp.PixelRgba_a_set)
    def __init__(self, *args): 
        this = _yarp.new_PixelRgba(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_PixelRgba
    __del__ = lambda self : None;
PixelRgba_swigregister = _yarp.PixelRgba_swigregister
PixelRgba_swigregister(PixelRgba)

class PixelBgra(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelBgra, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PixelBgra, name)
    __repr__ = _swig_repr
    __swig_setmethods__["b"] = _yarp.PixelBgra_b_set
    __swig_getmethods__["b"] = _yarp.PixelBgra_b_get
    if _newclass:b = _swig_property(_yarp.PixelBgra_b_get, _yarp.PixelBgra_b_set)
    __swig_setmethods__["g"] = _yarp.PixelBgra_g_set
    __swig_getmethods__["g"] = _yarp.PixelBgra_g_get
    if _newclass:g = _swig_property(_yarp.PixelBgra_g_get, _yarp.PixelBgra_g_set)
    __swig_setmethods__["r"] = _yarp.PixelBgra_r_set
    __swig_getmethods__["r"] = _yarp.PixelBgra_r_get
    if _newclass:r = _swig_property(_yarp.PixelBgra_r_get, _yarp.PixelBgra_r_set)
    __swig_setmethods__["a"] = _yarp.PixelBgra_a_set
    __swig_getmethods__["a"] = _yarp.PixelBgra_a_get
    if _newclass:a = _swig_property(_yarp.PixelBgra_a_get, _yarp.PixelBgra_a_set)
    def __init__(self, *args): 
        this = _yarp.new_PixelBgra(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_PixelBgra
    __del__ = lambda self : None;
PixelBgra_swigregister = _yarp.PixelBgra_swigregister
PixelBgra_swigregister(PixelBgra)

class PixelBgr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelBgr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PixelBgr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["b"] = _yarp.PixelBgr_b_set
    __swig_getmethods__["b"] = _yarp.PixelBgr_b_get
    if _newclass:b = _swig_property(_yarp.PixelBgr_b_get, _yarp.PixelBgr_b_set)
    __swig_setmethods__["g"] = _yarp.PixelBgr_g_set
    __swig_getmethods__["g"] = _yarp.PixelBgr_g_get
    if _newclass:g = _swig_property(_yarp.PixelBgr_g_get, _yarp.PixelBgr_g_set)
    __swig_setmethods__["r"] = _yarp.PixelBgr_r_set
    __swig_getmethods__["r"] = _yarp.PixelBgr_r_get
    if _newclass:r = _swig_property(_yarp.PixelBgr_r_get, _yarp.PixelBgr_r_set)
    def __init__(self, *args): 
        this = _yarp.new_PixelBgr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_PixelBgr
    __del__ = lambda self : None;
PixelBgr_swigregister = _yarp.PixelBgr_swigregister
PixelBgr_swigregister(PixelBgr)

class PixelHsv(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelHsv, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PixelHsv, name)
    __repr__ = _swig_repr
    __swig_setmethods__["h"] = _yarp.PixelHsv_h_set
    __swig_getmethods__["h"] = _yarp.PixelHsv_h_get
    if _newclass:h = _swig_property(_yarp.PixelHsv_h_get, _yarp.PixelHsv_h_set)
    __swig_setmethods__["s"] = _yarp.PixelHsv_s_set
    __swig_getmethods__["s"] = _yarp.PixelHsv_s_get
    if _newclass:s = _swig_property(_yarp.PixelHsv_s_get, _yarp.PixelHsv_s_set)
    __swig_setmethods__["v"] = _yarp.PixelHsv_v_set
    __swig_getmethods__["v"] = _yarp.PixelHsv_v_get
    if _newclass:v = _swig_property(_yarp.PixelHsv_v_get, _yarp.PixelHsv_v_set)
    def __init__(self, *args): 
        this = _yarp.new_PixelHsv(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_PixelHsv
    __del__ = lambda self : None;
PixelHsv_swigregister = _yarp.PixelHsv_swigregister
PixelHsv_swigregister(PixelHsv)

class PixelRgbSigned(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelRgbSigned, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PixelRgbSigned, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _yarp.PixelRgbSigned_r_set
    __swig_getmethods__["r"] = _yarp.PixelRgbSigned_r_get
    if _newclass:r = _swig_property(_yarp.PixelRgbSigned_r_get, _yarp.PixelRgbSigned_r_set)
    __swig_setmethods__["g"] = _yarp.PixelRgbSigned_g_set
    __swig_getmethods__["g"] = _yarp.PixelRgbSigned_g_get
    if _newclass:g = _swig_property(_yarp.PixelRgbSigned_g_get, _yarp.PixelRgbSigned_g_set)
    __swig_setmethods__["b"] = _yarp.PixelRgbSigned_b_set
    __swig_getmethods__["b"] = _yarp.PixelRgbSigned_b_get
    if _newclass:b = _swig_property(_yarp.PixelRgbSigned_b_get, _yarp.PixelRgbSigned_b_set)
    def __init__(self, *args): 
        this = _yarp.new_PixelRgbSigned(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_PixelRgbSigned
    __del__ = lambda self : None;
PixelRgbSigned_swigregister = _yarp.PixelRgbSigned_swigregister
PixelRgbSigned_swigregister(PixelRgbSigned)

class PixelRgbFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelRgbFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PixelRgbFloat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _yarp.PixelRgbFloat_r_set
    __swig_getmethods__["r"] = _yarp.PixelRgbFloat_r_get
    if _newclass:r = _swig_property(_yarp.PixelRgbFloat_r_get, _yarp.PixelRgbFloat_r_set)
    __swig_setmethods__["g"] = _yarp.PixelRgbFloat_g_set
    __swig_getmethods__["g"] = _yarp.PixelRgbFloat_g_get
    if _newclass:g = _swig_property(_yarp.PixelRgbFloat_g_get, _yarp.PixelRgbFloat_g_set)
    __swig_setmethods__["b"] = _yarp.PixelRgbFloat_b_set
    __swig_getmethods__["b"] = _yarp.PixelRgbFloat_b_get
    if _newclass:b = _swig_property(_yarp.PixelRgbFloat_b_get, _yarp.PixelRgbFloat_b_set)
    def __init__(self, *args): 
        this = _yarp.new_PixelRgbFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_PixelRgbFloat
    __del__ = lambda self : None;
PixelRgbFloat_swigregister = _yarp.PixelRgbFloat_swigregister
PixelRgbFloat_swigregister(PixelRgbFloat)

class PixelRgbInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelRgbInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PixelRgbInt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _yarp.PixelRgbInt_r_set
    __swig_getmethods__["r"] = _yarp.PixelRgbInt_r_get
    if _newclass:r = _swig_property(_yarp.PixelRgbInt_r_get, _yarp.PixelRgbInt_r_set)
    __swig_setmethods__["g"] = _yarp.PixelRgbInt_g_set
    __swig_getmethods__["g"] = _yarp.PixelRgbInt_g_get
    if _newclass:g = _swig_property(_yarp.PixelRgbInt_g_get, _yarp.PixelRgbInt_g_set)
    __swig_setmethods__["b"] = _yarp.PixelRgbInt_b_set
    __swig_getmethods__["b"] = _yarp.PixelRgbInt_b_get
    if _newclass:b = _swig_property(_yarp.PixelRgbInt_b_get, _yarp.PixelRgbInt_b_set)
    def __init__(self, *args): 
        this = _yarp.new_PixelRgbInt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_PixelRgbInt
    __del__ = lambda self : None;
PixelRgbInt_swigregister = _yarp.PixelRgbInt_swigregister
PixelRgbInt_swigregister(PixelRgbInt)

class PixelHsvFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelHsvFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PixelHsvFloat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["h"] = _yarp.PixelHsvFloat_h_set
    __swig_getmethods__["h"] = _yarp.PixelHsvFloat_h_get
    if _newclass:h = _swig_property(_yarp.PixelHsvFloat_h_get, _yarp.PixelHsvFloat_h_set)
    __swig_setmethods__["s"] = _yarp.PixelHsvFloat_s_set
    __swig_getmethods__["s"] = _yarp.PixelHsvFloat_s_get
    if _newclass:s = _swig_property(_yarp.PixelHsvFloat_s_get, _yarp.PixelHsvFloat_s_set)
    __swig_setmethods__["v"] = _yarp.PixelHsvFloat_v_set
    __swig_getmethods__["v"] = _yarp.PixelHsvFloat_v_get
    if _newclass:v = _swig_property(_yarp.PixelHsvFloat_v_get, _yarp.PixelHsvFloat_v_set)
    def __init__(self, *args): 
        this = _yarp.new_PixelHsvFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_PixelHsvFloat
    __del__ = lambda self : None;
PixelHsvFloat_swigregister = _yarp.PixelHsvFloat_swigregister
PixelHsvFloat_swigregister(PixelHsvFloat)

class Sound(Portable):
    __swig_setmethods__ = {}
    for _s in [Portable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sound, name, value)
    __swig_getmethods__ = {}
    for _s in [Portable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sound, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yarp.new_Sound(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_Sound
    __del__ = lambda self : None;
    def resize(*args): return _yarp.Sound_resize(*args)
    def get(*args): return _yarp.Sound_get(*args)
    def set(*args): return _yarp.Sound_set(*args)
    def getSafe(*args): return _yarp.Sound_getSafe(*args)
    def setSafe(*args): return _yarp.Sound_setSafe(*args)
    def isSample(*args): return _yarp.Sound_isSample(*args)
    def getFrequency(*args): return _yarp.Sound_getFrequency(*args)
    def setFrequency(*args): return _yarp.Sound_setFrequency(*args)
    def getBytesPerSample(*args): return _yarp.Sound_getBytesPerSample(*args)
    def getSamples(*args): return _yarp.Sound_getSamples(*args)
    def getChannels(*args): return _yarp.Sound_getChannels(*args)
    def write(*args): return _yarp.Sound_write(*args)
    def getRawData(*args): return _yarp.Sound_getRawData(*args)
    def getRawDataSize(*args): return _yarp.Sound_getRawDataSize(*args)
Sound_swigregister = _yarp.Sound_swigregister
Sound_swigregister(Sound)

class BottleCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BottleCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BottleCallback, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_BottleCallback
    __del__ = lambda self : None;
    def onRead(*args): return _yarp.BottleCallback_onRead(*args)
    def __init__(self, *args): 
        this = _yarp.new_BottleCallback(*args)
        try: self.this.append(this)
        except: self.this = this
BottleCallback_swigregister = _yarp.BottleCallback_swigregister
BottleCallback_swigregister(BottleCallback)

class IConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IConfig, name)
    __repr__ = _swig_repr
    def open(*args): return _yarp.IConfig_open(*args)
    def close(*args): return _yarp.IConfig_close(*args)
    def configure(*args): return _yarp.IConfig_configure(*args)
    __swig_destroy__ = _yarp.delete_IConfig
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _yarp.new_IConfig(*args)
        try: self.this.append(this)
        except: self.this = this
IConfig_swigregister = _yarp.IConfig_swigregister
IConfig_swigregister(IConfig)

class DeviceDriver(IConfig):
    __swig_setmethods__ = {}
    for _s in [IConfig]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [IConfig]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceDriver, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_DeviceDriver
    __del__ = lambda self : None;
    def open(*args): return _yarp.DeviceDriver_open(*args)
    def close(*args): return _yarp.DeviceDriver_close(*args)
    def __init__(self, *args): 
        this = _yarp.new_DeviceDriver(*args)
        try: self.this.append(this)
        except: self.this = this
DeviceDriver_swigregister = _yarp.DeviceDriver_swigregister
DeviceDriver_swigregister(DeviceDriver)

class DeviceResponder(PortReader,BottleCallback):
    __swig_setmethods__ = {}
    for _s in [PortReader,BottleCallback]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceResponder, name, value)
    __swig_getmethods__ = {}
    for _s in [PortReader,BottleCallback]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceResponder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yarp.new_DeviceResponder(*args)
        try: self.this.append(this)
        except: self.this = this
    def addUsage(*args): return _yarp.DeviceResponder_addUsage(*args)
    def respond(*args): return _yarp.DeviceResponder_respond(*args)
    def onRead(*args): return _yarp.DeviceResponder_onRead(*args)
    def makeUsage(*args): return _yarp.DeviceResponder_makeUsage(*args)
    def attach(*args): return _yarp.DeviceResponder_attach(*args)
    __swig_destroy__ = _yarp.delete_DeviceResponder
    __del__ = lambda self : None;
DeviceResponder_swigregister = _yarp.DeviceResponder_swigregister
DeviceResponder_swigregister(DeviceResponder)

class PolyDriver(DeviceDriver):
    __swig_setmethods__ = {}
    for _s in [DeviceDriver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolyDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [DeviceDriver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PolyDriver, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yarp.new_PolyDriver(*args)
        try: self.this.append(this)
        except: self.this = this
    def open(*args): return _yarp.PolyDriver_open(*args)
    def link(*args): return _yarp.PolyDriver_link(*args)
    def take(*args): return _yarp.PolyDriver_take(*args)
    __swig_destroy__ = _yarp.delete_PolyDriver
    __del__ = lambda self : None;
    def close(*args): return _yarp.PolyDriver_close(*args)
    def isValid(*args): return _yarp.PolyDriver_isValid(*args)
    def getOptions(*args): return _yarp.PolyDriver_getOptions(*args)
    def getComment(*args): return _yarp.PolyDriver_getComment(*args)
    def getDefaultValue(*args): return _yarp.PolyDriver_getDefaultValue(*args)
    def getValue(*args): return _yarp.PolyDriver_getValue(*args)
    def viewFrameGrabberImage(*args): return _yarp.PolyDriver_viewFrameGrabberImage(*args)
    def viewIPositionControl(*args): return _yarp.PolyDriver_viewIPositionControl(*args)
    def viewIVelocityControl(*args): return _yarp.PolyDriver_viewIVelocityControl(*args)
    def viewIEncoders(*args): return _yarp.PolyDriver_viewIEncoders(*args)
    def viewIPidControl(*args): return _yarp.PolyDriver_viewIPidControl(*args)
    def viewIAmplifierControl(*args): return _yarp.PolyDriver_viewIAmplifierControl(*args)
    def viewIControlLimits(*args): return _yarp.PolyDriver_viewIControlLimits(*args)
PolyDriver_swigregister = _yarp.PolyDriver_swigregister
PolyDriver_swigregister(PolyDriver)

class IFrameGrabber(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFrameGrabber, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IFrameGrabber, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IFrameGrabber
    __del__ = lambda self : None;
    def getRawBuffer(*args): return _yarp.IFrameGrabber_getRawBuffer(*args)
    def getRawBufferSize(*args): return _yarp.IFrameGrabber_getRawBufferSize(*args)
    def height(*args): return _yarp.IFrameGrabber_height(*args)
    def width(*args): return _yarp.IFrameGrabber_width(*args)
IFrameGrabber_swigregister = _yarp.IFrameGrabber_swigregister
IFrameGrabber_swigregister(IFrameGrabber)

class IFrameGrabberRgb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFrameGrabberRgb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IFrameGrabberRgb, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IFrameGrabberRgb
    __del__ = lambda self : None;
    def getRgbBuffer(*args): return _yarp.IFrameGrabberRgb_getRgbBuffer(*args)
    def height(*args): return _yarp.IFrameGrabberRgb_height(*args)
    def width(*args): return _yarp.IFrameGrabberRgb_width(*args)
IFrameGrabberRgb_swigregister = _yarp.IFrameGrabberRgb_swigregister
IFrameGrabberRgb_swigregister(IFrameGrabberRgb)

class IFrameGrabberImage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFrameGrabberImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IFrameGrabberImage, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IFrameGrabberImage
    __del__ = lambda self : None;
    def getImage(*args): return _yarp.IFrameGrabberImage_getImage(*args)
    def height(*args): return _yarp.IFrameGrabberImage_height(*args)
    def width(*args): return _yarp.IFrameGrabberImage_width(*args)
IFrameGrabberImage_swigregister = _yarp.IFrameGrabberImage_swigregister
IFrameGrabberImage_swigregister(IFrameGrabberImage)

class IFrameWriterImage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFrameWriterImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IFrameWriterImage, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IFrameWriterImage
    __del__ = lambda self : None;
    def putImage(*args): return _yarp.IFrameWriterImage_putImage(*args)
IFrameWriterImage_swigregister = _yarp.IFrameWriterImage_swigregister
IFrameWriterImage_swigregister(IFrameWriterImage)

class IFrameGrabberControls(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFrameGrabberControls, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IFrameGrabberControls, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IFrameGrabberControls
    __del__ = lambda self : None;
    def setBrightness(*args): return _yarp.IFrameGrabberControls_setBrightness(*args)
    def setExposure(*args): return _yarp.IFrameGrabberControls_setExposure(*args)
    def setSharpness(*args): return _yarp.IFrameGrabberControls_setSharpness(*args)
    def setWhiteBalance(*args): return _yarp.IFrameGrabberControls_setWhiteBalance(*args)
    def setHue(*args): return _yarp.IFrameGrabberControls_setHue(*args)
    def setSaturation(*args): return _yarp.IFrameGrabberControls_setSaturation(*args)
    def setGamma(*args): return _yarp.IFrameGrabberControls_setGamma(*args)
    def setShutter(*args): return _yarp.IFrameGrabberControls_setShutter(*args)
    def setGain(*args): return _yarp.IFrameGrabberControls_setGain(*args)
    def setIris(*args): return _yarp.IFrameGrabberControls_setIris(*args)
    def getBrightness(*args): return _yarp.IFrameGrabberControls_getBrightness(*args)
    def getExposure(*args): return _yarp.IFrameGrabberControls_getExposure(*args)
    def getSharpness(*args): return _yarp.IFrameGrabberControls_getSharpness(*args)
    def getWhiteBalance(*args): return _yarp.IFrameGrabberControls_getWhiteBalance(*args)
    def getHue(*args): return _yarp.IFrameGrabberControls_getHue(*args)
    def getSaturation(*args): return _yarp.IFrameGrabberControls_getSaturation(*args)
    def getGamma(*args): return _yarp.IFrameGrabberControls_getGamma(*args)
    def getShutter(*args): return _yarp.IFrameGrabberControls_getShutter(*args)
    def getGain(*args): return _yarp.IFrameGrabberControls_getGain(*args)
    def getIris(*args): return _yarp.IFrameGrabberControls_getIris(*args)
IFrameGrabberControls_swigregister = _yarp.IFrameGrabberControls_swigregister
IFrameGrabberControls_swigregister(IFrameGrabberControls)

class IFrameGrabberControlsDC1394(IFrameGrabberControls):
    __swig_setmethods__ = {}
    for _s in [IFrameGrabberControls]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFrameGrabberControlsDC1394, name, value)
    __swig_getmethods__ = {}
    for _s in [IFrameGrabberControls]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IFrameGrabberControlsDC1394, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def hasFeatureDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_hasFeatureDC1394(*args)
    def setFeatureDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_setFeatureDC1394(*args)
    def getFeatureDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_getFeatureDC1394(*args)
    def hasOnOffDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_hasOnOffDC1394(*args)
    def setActiveDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_setActiveDC1394(*args)
    def getActiveDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_getActiveDC1394(*args)
    def hasAutoDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_hasAutoDC1394(*args)
    def hasManualDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_hasManualDC1394(*args)
    def hasOnePushDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_hasOnePushDC1394(*args)
    def setModeDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_setModeDC1394(*args)
    def getModeDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_getModeDC1394(*args)
    def setOnePushDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_setOnePushDC1394(*args)
    def getVideoModeMaskDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_getVideoModeMaskDC1394(*args)
    def getVideoModeDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_getVideoModeDC1394(*args)
    def setVideoModeDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_setVideoModeDC1394(*args)
    def getFPSMaskDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_getFPSMaskDC1394(*args)
    def getFPSDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_getFPSDC1394(*args)
    def setFPSDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_setFPSDC1394(*args)
    def getISOSpeedDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_getISOSpeedDC1394(*args)
    def setISOSpeedDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_setISOSpeedDC1394(*args)
    def getColorCodingMaskDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_getColorCodingMaskDC1394(*args)
    def getColorCodingDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_getColorCodingDC1394(*args)
    def setColorCodingDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_setColorCodingDC1394(*args)
    def setWhiteBalanceDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_setWhiteBalanceDC1394(*args)
    def getWhiteBalanceDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_getWhiteBalanceDC1394(*args)
    def getFormat7MaxWindowDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_getFormat7MaxWindowDC1394(*args)
    def getFormat7WindowDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_getFormat7WindowDC1394(*args)
    def setFormat7WindowDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_setFormat7WindowDC1394(*args)
    def setOperationModeDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_setOperationModeDC1394(*args)
    def getOperationModeDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_getOperationModeDC1394(*args)
    def setTransmissionDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_setTransmissionDC1394(*args)
    def getTransmissionDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_getTransmissionDC1394(*args)
    def setBroadcastDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_setBroadcastDC1394(*args)
    def setDefaultsDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_setDefaultsDC1394(*args)
    def setResetDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_setResetDC1394(*args)
    def setPowerDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_setPowerDC1394(*args)
    def setCaptureDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_setCaptureDC1394(*args)
    def getBytesPerPacketDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_getBytesPerPacketDC1394(*args)
    def setBytesPerPacketDC1394(*args): return _yarp.IFrameGrabberControlsDC1394_setBytesPerPacketDC1394(*args)
    __swig_destroy__ = _yarp.delete_IFrameGrabberControlsDC1394
    __del__ = lambda self : None;
IFrameGrabberControlsDC1394_swigregister = _yarp.IFrameGrabberControlsDC1394_swigregister
IFrameGrabberControlsDC1394_swigregister(IFrameGrabberControlsDC1394)

class IAudioVisualGrabber(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAudioVisualGrabber, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IAudioVisualGrabber, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IAudioVisualGrabber
    __del__ = lambda self : None;
    def getAudioVisual(*args): return _yarp.IAudioVisualGrabber_getAudioVisual(*args)
IAudioVisualGrabber_swigregister = _yarp.IAudioVisualGrabber_swigregister
IAudioVisualGrabber_swigregister(IAudioVisualGrabber)

class IFrameWriterAudioVisual(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFrameWriterAudioVisual, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IFrameWriterAudioVisual, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IFrameWriterAudioVisual
    __del__ = lambda self : None;
    def putAudioVisual(*args): return _yarp.IFrameWriterAudioVisual_putAudioVisual(*args)
IFrameWriterAudioVisual_swigregister = _yarp.IFrameWriterAudioVisual_swigregister
IFrameWriterAudioVisual_swigregister(IFrameWriterAudioVisual)

class IAudioVisualStream(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAudioVisualStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IAudioVisualStream, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IAudioVisualStream
    __del__ = lambda self : None;
    def hasAudio(*args): return _yarp.IAudioVisualStream_hasAudio(*args)
    def hasVideo(*args): return _yarp.IAudioVisualStream_hasVideo(*args)
IAudioVisualStream_swigregister = _yarp.IAudioVisualStream_swigregister
IAudioVisualStream_swigregister(IAudioVisualStream)

class IPidControlRaw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPidControlRaw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPidControlRaw, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IPidControlRaw
    __del__ = lambda self : None;
    def setPidRaw(*args): return _yarp.IPidControlRaw_setPidRaw(*args)
    def setPidsRaw(*args): return _yarp.IPidControlRaw_setPidsRaw(*args)
    def setReferenceRaw(*args): return _yarp.IPidControlRaw_setReferenceRaw(*args)
    def setReferencesRaw(*args): return _yarp.IPidControlRaw_setReferencesRaw(*args)
    def setErrorLimitRaw(*args): return _yarp.IPidControlRaw_setErrorLimitRaw(*args)
    def setErrorLimitsRaw(*args): return _yarp.IPidControlRaw_setErrorLimitsRaw(*args)
    def getErrorRaw(*args): return _yarp.IPidControlRaw_getErrorRaw(*args)
    def getErrorsRaw(*args): return _yarp.IPidControlRaw_getErrorsRaw(*args)
    def getOutputRaw(*args): return _yarp.IPidControlRaw_getOutputRaw(*args)
    def getOutputsRaw(*args): return _yarp.IPidControlRaw_getOutputsRaw(*args)
    def getPidRaw(*args): return _yarp.IPidControlRaw_getPidRaw(*args)
    def getPidsRaw(*args): return _yarp.IPidControlRaw_getPidsRaw(*args)
    def getReferenceRaw(*args): return _yarp.IPidControlRaw_getReferenceRaw(*args)
    def getReferencesRaw(*args): return _yarp.IPidControlRaw_getReferencesRaw(*args)
    def getErrorLimitRaw(*args): return _yarp.IPidControlRaw_getErrorLimitRaw(*args)
    def getErrorLimitsRaw(*args): return _yarp.IPidControlRaw_getErrorLimitsRaw(*args)
    def resetPidRaw(*args): return _yarp.IPidControlRaw_resetPidRaw(*args)
    def disablePidRaw(*args): return _yarp.IPidControlRaw_disablePidRaw(*args)
    def enablePidRaw(*args): return _yarp.IPidControlRaw_enablePidRaw(*args)
    def setOffsetRaw(*args): return _yarp.IPidControlRaw_setOffsetRaw(*args)
IPidControlRaw_swigregister = _yarp.IPidControlRaw_swigregister
IPidControlRaw_swigregister(IPidControlRaw)

class IPidControl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPidControl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPidControl, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IPidControl
    __del__ = lambda self : None;
    def setReference(*args): return _yarp.IPidControl_setReference(*args)
    def setErrorLimit(*args): return _yarp.IPidControl_setErrorLimit(*args)
    def resetPid(*args): return _yarp.IPidControl_resetPid(*args)
    def disablePid(*args): return _yarp.IPidControl_disablePid(*args)
    def enablePid(*args): return _yarp.IPidControl_enablePid(*args)
    def setOffset(*args): return _yarp.IPidControl_setOffset(*args)
    def setReferences(*args): return _yarp.IPidControl_setReferences(*args)
    def getReference(*args): return _yarp.IPidControl_getReference(*args)
    def getReferences(*args): return _yarp.IPidControl_getReferences(*args)
    def setErrorLimits(*args): return _yarp.IPidControl_setErrorLimits(*args)
    def getErrorLimit(*args): return _yarp.IPidControl_getErrorLimit(*args)
    def getErrorLimits(*args): return _yarp.IPidControl_getErrorLimits(*args)
    def getError(*args): return _yarp.IPidControl_getError(*args)
    def getErrors(*args): return _yarp.IPidControl_getErrors(*args)
    def getOutput(*args): return _yarp.IPidControl_getOutput(*args)
    def getOutputs(*args): return _yarp.IPidControl_getOutputs(*args)
    def setPid(*args): return _yarp.IPidControl_setPid(*args)
    def setPids(*args): return _yarp.IPidControl_setPids(*args)
    def getPid(*args): return _yarp.IPidControl_getPid(*args)
    def getPids(*args): return _yarp.IPidControl_getPids(*args)
IPidControl_swigregister = _yarp.IPidControl_swigregister
IPidControl_swigregister(IPidControl)

class IPositionControlRaw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPositionControlRaw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPositionControlRaw, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IPositionControlRaw
    __del__ = lambda self : None;
    def getAxes(*args): return _yarp.IPositionControlRaw_getAxes(*args)
    def setPositionMode(*args): return _yarp.IPositionControlRaw_setPositionMode(*args)
    def positionMoveRaw(*args): return _yarp.IPositionControlRaw_positionMoveRaw(*args)
    def relativeMoveRaw(*args): return _yarp.IPositionControlRaw_relativeMoveRaw(*args)
    def checkMotionDoneRaw(*args): return _yarp.IPositionControlRaw_checkMotionDoneRaw(*args)
    def setRefSpeedRaw(*args): return _yarp.IPositionControlRaw_setRefSpeedRaw(*args)
    def setRefSpeedsRaw(*args): return _yarp.IPositionControlRaw_setRefSpeedsRaw(*args)
    def setRefAccelerationRaw(*args): return _yarp.IPositionControlRaw_setRefAccelerationRaw(*args)
    def setRefAccelerationsRaw(*args): return _yarp.IPositionControlRaw_setRefAccelerationsRaw(*args)
    def getRefSpeedRaw(*args): return _yarp.IPositionControlRaw_getRefSpeedRaw(*args)
    def getRefSpeedsRaw(*args): return _yarp.IPositionControlRaw_getRefSpeedsRaw(*args)
    def getRefAccelerationRaw(*args): return _yarp.IPositionControlRaw_getRefAccelerationRaw(*args)
    def getRefAccelerationsRaw(*args): return _yarp.IPositionControlRaw_getRefAccelerationsRaw(*args)
    def stopRaw(*args): return _yarp.IPositionControlRaw_stopRaw(*args)
IPositionControlRaw_swigregister = _yarp.IPositionControlRaw_swigregister
IPositionControlRaw_swigregister(IPositionControlRaw)

class IPositionControl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPositionControl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPositionControl, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IPositionControl
    __del__ = lambda self : None;
    def setPositionMode(*args): return _yarp.IPositionControl_setPositionMode(*args)
    def checkMotionDone(*args): return _yarp.IPositionControl_checkMotionDone(*args)
    def setRefSpeed(*args): return _yarp.IPositionControl_setRefSpeed(*args)
    def setRefAcceleration(*args): return _yarp.IPositionControl_setRefAcceleration(*args)
    def setRefAccelerations(*args): return _yarp.IPositionControl_setRefAccelerations(*args)
    def stop(*args): return _yarp.IPositionControl_stop(*args)
    def getAxes(*args): return _yarp.IPositionControl_getAxes(*args)
    def positionMove(*args): return _yarp.IPositionControl_positionMove(*args)
    def relativeMove(*args): return _yarp.IPositionControl_relativeMove(*args)
    def setRefSpeeds(*args): return _yarp.IPositionControl_setRefSpeeds(*args)
    def getRefSpeed(*args): return _yarp.IPositionControl_getRefSpeed(*args)
    def getRefSpeeds(*args): return _yarp.IPositionControl_getRefSpeeds(*args)
    def getRefAcceleration(*args): return _yarp.IPositionControl_getRefAcceleration(*args)
    def getRefAccelerations(*args): return _yarp.IPositionControl_getRefAccelerations(*args)
IPositionControl_swigregister = _yarp.IPositionControl_swigregister
IPositionControl_swigregister(IPositionControl)

class IVelocityControlRaw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IVelocityControlRaw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IVelocityControlRaw, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IVelocityControlRaw
    __del__ = lambda self : None;
    def getAxes(*args): return _yarp.IVelocityControlRaw_getAxes(*args)
    def setVelocityMode(*args): return _yarp.IVelocityControlRaw_setVelocityMode(*args)
    def velocityMoveRaw(*args): return _yarp.IVelocityControlRaw_velocityMoveRaw(*args)
    def setRefAccelerationRaw(*args): return _yarp.IVelocityControlRaw_setRefAccelerationRaw(*args)
    def setRefAccelerationsRaw(*args): return _yarp.IVelocityControlRaw_setRefAccelerationsRaw(*args)
    def getRefAccelerationRaw(*args): return _yarp.IVelocityControlRaw_getRefAccelerationRaw(*args)
    def getRefAccelerationsRaw(*args): return _yarp.IVelocityControlRaw_getRefAccelerationsRaw(*args)
    def stopRaw(*args): return _yarp.IVelocityControlRaw_stopRaw(*args)
IVelocityControlRaw_swigregister = _yarp.IVelocityControlRaw_swigregister
IVelocityControlRaw_swigregister(IVelocityControlRaw)

class IVelocityControl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IVelocityControl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IVelocityControl, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IVelocityControl
    __del__ = lambda self : None;
    def setVelocityMode(*args): return _yarp.IVelocityControl_setVelocityMode(*args)
    def setRefAcceleration(*args): return _yarp.IVelocityControl_setRefAcceleration(*args)
    def stop(*args): return _yarp.IVelocityControl_stop(*args)
    def getAxes(*args): return _yarp.IVelocityControl_getAxes(*args)
    def velocityMove(*args): return _yarp.IVelocityControl_velocityMove(*args)
    def setRefAccelerations(*args): return _yarp.IVelocityControl_setRefAccelerations(*args)
    def getRefAcceleration(*args): return _yarp.IVelocityControl_getRefAcceleration(*args)
    def getRefAccelerations(*args): return _yarp.IVelocityControl_getRefAccelerations(*args)
IVelocityControl_swigregister = _yarp.IVelocityControl_swigregister
IVelocityControl_swigregister(IVelocityControl)

class ITorqueControlRaw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ITorqueControlRaw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ITorqueControlRaw, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_ITorqueControlRaw
    __del__ = lambda self : None;
    def getAxes(*args): return _yarp.ITorqueControlRaw_getAxes(*args)
    def setTorqueMode(*args): return _yarp.ITorqueControlRaw_setTorqueMode(*args)
    def getRefTorqueRaw(*args): return _yarp.ITorqueControlRaw_getRefTorqueRaw(*args)
    def getRefTorquesRaw(*args): return _yarp.ITorqueControlRaw_getRefTorquesRaw(*args)
    def setTorquesRaw(*args): return _yarp.ITorqueControlRaw_setTorquesRaw(*args)
    def setTorqueRaw(*args): return _yarp.ITorqueControlRaw_setTorqueRaw(*args)
ITorqueControlRaw_swigregister = _yarp.ITorqueControlRaw_swigregister
ITorqueControlRaw_swigregister(ITorqueControlRaw)

class IEncodersRaw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IEncodersRaw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IEncodersRaw, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IEncodersRaw
    __del__ = lambda self : None;
    def getAxes(*args): return _yarp.IEncodersRaw_getAxes(*args)
    def resetEncoderRaw(*args): return _yarp.IEncodersRaw_resetEncoderRaw(*args)
    def resetEncodersRaw(*args): return _yarp.IEncodersRaw_resetEncodersRaw(*args)
    def setEncoderRaw(*args): return _yarp.IEncodersRaw_setEncoderRaw(*args)
    def setEncodersRaw(*args): return _yarp.IEncodersRaw_setEncodersRaw(*args)
    def getEncoderRaw(*args): return _yarp.IEncodersRaw_getEncoderRaw(*args)
    def getEncodersRaw(*args): return _yarp.IEncodersRaw_getEncodersRaw(*args)
    def getEncoderSpeedRaw(*args): return _yarp.IEncodersRaw_getEncoderSpeedRaw(*args)
    def getEncoderSpeedsRaw(*args): return _yarp.IEncodersRaw_getEncoderSpeedsRaw(*args)
    def getEncoderAccelerationRaw(*args): return _yarp.IEncodersRaw_getEncoderAccelerationRaw(*args)
    def getEncoderAccelerationsRaw(*args): return _yarp.IEncodersRaw_getEncoderAccelerationsRaw(*args)
IEncodersRaw_swigregister = _yarp.IEncodersRaw_swigregister
IEncodersRaw_swigregister(IEncodersRaw)

class IEncoders(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IEncoders, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IEncoders, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IEncoders
    __del__ = lambda self : None;
    def resetEncoder(*args): return _yarp.IEncoders_resetEncoder(*args)
    def resetEncoders(*args): return _yarp.IEncoders_resetEncoders(*args)
    def setEncoder(*args): return _yarp.IEncoders_setEncoder(*args)
    def getAxes(*args): return _yarp.IEncoders_getAxes(*args)
    def setEncoders(*args): return _yarp.IEncoders_setEncoders(*args)
    def getEncoder(*args): return _yarp.IEncoders_getEncoder(*args)
    def getEncoders(*args): return _yarp.IEncoders_getEncoders(*args)
    def getEncoderSpeed(*args): return _yarp.IEncoders_getEncoderSpeed(*args)
    def getEncoderSpeeds(*args): return _yarp.IEncoders_getEncoderSpeeds(*args)
    def getEncoderAcceleration(*args): return _yarp.IEncoders_getEncoderAcceleration(*args)
    def getEncoderAccelerations(*args): return _yarp.IEncoders_getEncoderAccelerations(*args)
IEncoders_swigregister = _yarp.IEncoders_swigregister
IEncoders_swigregister(IEncoders)

class IAmplifierControl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAmplifierControl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IAmplifierControl, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IAmplifierControl
    __del__ = lambda self : None;
    def enableAmp(*args): return _yarp.IAmplifierControl_enableAmp(*args)
    def disableAmp(*args): return _yarp.IAmplifierControl_disableAmp(*args)
    def setMaxCurrent(*args): return _yarp.IAmplifierControl_setMaxCurrent(*args)
    def getAmpStatus(*args): return _yarp.IAmplifierControl_getAmpStatus(*args)
    def getCurrents(*args): return _yarp.IAmplifierControl_getCurrents(*args)
    def getCurrent(*args): return _yarp.IAmplifierControl_getCurrent(*args)
IAmplifierControl_swigregister = _yarp.IAmplifierControl_swigregister
IAmplifierControl_swigregister(IAmplifierControl)

class IAmplifierControlRaw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAmplifierControlRaw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IAmplifierControlRaw, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IAmplifierControlRaw
    __del__ = lambda self : None;
    def enableAmpRaw(*args): return _yarp.IAmplifierControlRaw_enableAmpRaw(*args)
    def disableAmpRaw(*args): return _yarp.IAmplifierControlRaw_disableAmpRaw(*args)
    def getCurrentsRaw(*args): return _yarp.IAmplifierControlRaw_getCurrentsRaw(*args)
    def getCurrentRaw(*args): return _yarp.IAmplifierControlRaw_getCurrentRaw(*args)
    def setMaxCurrentRaw(*args): return _yarp.IAmplifierControlRaw_setMaxCurrentRaw(*args)
    def getAmpStatusRaw(*args): return _yarp.IAmplifierControlRaw_getAmpStatusRaw(*args)
IAmplifierControlRaw_swigregister = _yarp.IAmplifierControlRaw_swigregister
IAmplifierControlRaw_swigregister(IAmplifierControlRaw)

class IControlCalibrationRaw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IControlCalibrationRaw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IControlCalibrationRaw, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IControlCalibrationRaw
    __del__ = lambda self : None;
    def calibrateRaw(*args): return _yarp.IControlCalibrationRaw_calibrateRaw(*args)
    def doneRaw(*args): return _yarp.IControlCalibrationRaw_doneRaw(*args)
IControlCalibrationRaw_swigregister = _yarp.IControlCalibrationRaw_swigregister
IControlCalibrationRaw_swigregister(IControlCalibrationRaw)

class IControlCalibration2Raw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IControlCalibration2Raw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IControlCalibration2Raw, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IControlCalibration2Raw
    __del__ = lambda self : None;
    def calibrate2Raw(*args): return _yarp.IControlCalibration2Raw_calibrate2Raw(*args)
    def doneRaw(*args): return _yarp.IControlCalibration2Raw_doneRaw(*args)
IControlCalibration2Raw_swigregister = _yarp.IControlCalibration2Raw_swigregister
IControlCalibration2Raw_swigregister(IControlCalibration2Raw)

class IControlCalibration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IControlCalibration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IControlCalibration, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IControlCalibration
    __del__ = lambda self : None;
    def done(*args): return _yarp.IControlCalibration_done(*args)
    def setCalibrator(*args): return _yarp.IControlCalibration_setCalibrator(*args)
    def calibrate(*args): return _yarp.IControlCalibration_calibrate(*args)
    def park(*args): return _yarp.IControlCalibration_park(*args)
IControlCalibration_swigregister = _yarp.IControlCalibration_swigregister
IControlCalibration_swigregister(IControlCalibration)

class IControlCalibration2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IControlCalibration2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IControlCalibration2, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IControlCalibration2
    __del__ = lambda self : None;
    def calibrate2(*args): return _yarp.IControlCalibration2_calibrate2(*args)
    def done(*args): return _yarp.IControlCalibration2_done(*args)
    def setCalibrator(*args): return _yarp.IControlCalibration2_setCalibrator(*args)
    def calibrate(*args): return _yarp.IControlCalibration2_calibrate(*args)
    def park(*args): return _yarp.IControlCalibration2_park(*args)
    def abortCalibration(*args): return _yarp.IControlCalibration2_abortCalibration(*args)
    def abortPark(*args): return _yarp.IControlCalibration2_abortPark(*args)
IControlCalibration2_swigregister = _yarp.IControlCalibration2_swigregister
IControlCalibration2_swigregister(IControlCalibration2)

class IControlDebug(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IControlDebug, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IControlDebug, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IControlDebug
    __del__ = lambda self : None;
    def setPrintFunction(*args): return _yarp.IControlDebug_setPrintFunction(*args)
    def loadBootMemory(*args): return _yarp.IControlDebug_loadBootMemory(*args)
    def saveBootMemory(*args): return _yarp.IControlDebug_saveBootMemory(*args)
IControlDebug_swigregister = _yarp.IControlDebug_swigregister
IControlDebug_swigregister(IControlDebug)

class IControlLimits(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IControlLimits, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IControlLimits, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IControlLimits
    __del__ = lambda self : None;
    def setLimits(*args): return _yarp.IControlLimits_setLimits(*args)
    def getLimits(*args): return _yarp.IControlLimits_getLimits(*args)
IControlLimits_swigregister = _yarp.IControlLimits_swigregister
IControlLimits_swigregister(IControlLimits)

class IControlLimitsRaw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IControlLimitsRaw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IControlLimitsRaw, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IControlLimitsRaw
    __del__ = lambda self : None;
    def setLimitsRaw(*args): return _yarp.IControlLimitsRaw_setLimitsRaw(*args)
    def getLimitsRaw(*args): return _yarp.IControlLimitsRaw_getLimitsRaw(*args)
IControlLimitsRaw_swigregister = _yarp.IControlLimitsRaw_swigregister
IControlLimitsRaw_swigregister(IControlLimitsRaw)

class IAxisInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAxisInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IAxisInfo, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IAxisInfo
    __del__ = lambda self : None;
    def getAxisName(*args): return _yarp.IAxisInfo_getAxisName(*args)
IAxisInfo_swigregister = _yarp.IAxisInfo_swigregister
IAxisInfo_swigregister(IAxisInfo)

VOCAB_CALIBRATE_JOINT = _yarp.VOCAB_CALIBRATE_JOINT
VOCAB_CALIBRATE = _yarp.VOCAB_CALIBRATE
VOCAB_ABORTCALIB = _yarp.VOCAB_ABORTCALIB
VOCAB_ABORTPARK = _yarp.VOCAB_ABORTPARK
VOCAB_CALIBRATE_DONE = _yarp.VOCAB_CALIBRATE_DONE
VOCAB_PARK = _yarp.VOCAB_PARK
VOCAB_SET = _yarp.VOCAB_SET
VOCAB_GET = _yarp.VOCAB_GET
VOCAB_IS = _yarp.VOCAB_IS
VOCAB_FAILED = _yarp.VOCAB_FAILED
VOCAB_OK = _yarp.VOCAB_OK
VOCAB_OFFSET = _yarp.VOCAB_OFFSET
VOCAB_PID = _yarp.VOCAB_PID
VOCAB_PIDS = _yarp.VOCAB_PIDS
VOCAB_REF = _yarp.VOCAB_REF
VOCAB_REFS = _yarp.VOCAB_REFS
VOCAB_LIM = _yarp.VOCAB_LIM
VOCAB_LIMS = _yarp.VOCAB_LIMS
VOCAB_RESET = _yarp.VOCAB_RESET
VOCAB_DISABLE = _yarp.VOCAB_DISABLE
VOCAB_ENABLE = _yarp.VOCAB_ENABLE
VOCAB_ERR = _yarp.VOCAB_ERR
VOCAB_ERRS = _yarp.VOCAB_ERRS
VOCAB_OUTPUT = _yarp.VOCAB_OUTPUT
VOCAB_OUTPUTS = _yarp.VOCAB_OUTPUTS
VOCAB_REFERENCE = _yarp.VOCAB_REFERENCE
VOCAB_REFERENCES = _yarp.VOCAB_REFERENCES
VOCAB_AXES = _yarp.VOCAB_AXES
VOCAB_MOTION_DONE = _yarp.VOCAB_MOTION_DONE
VOCAB_MOTION_DONES = _yarp.VOCAB_MOTION_DONES
VOCAB_POSITION_MODE = _yarp.VOCAB_POSITION_MODE
VOCAB_POSITION_MOVE = _yarp.VOCAB_POSITION_MOVE
VOCAB_POSITION_MOVES = _yarp.VOCAB_POSITION_MOVES
VOCAB_RELATIVE_MOVE = _yarp.VOCAB_RELATIVE_MOVE
VOCAB_RELATIVE_MOVES = _yarp.VOCAB_RELATIVE_MOVES
VOCAB_REF_SPEED = _yarp.VOCAB_REF_SPEED
VOCAB_REF_SPEEDS = _yarp.VOCAB_REF_SPEEDS
VOCAB_REF_ACCELERATION = _yarp.VOCAB_REF_ACCELERATION
VOCAB_REF_ACCELERATIONS = _yarp.VOCAB_REF_ACCELERATIONS
VOCAB_STOP = _yarp.VOCAB_STOP
VOCAB_STOPS = _yarp.VOCAB_STOPS
VOCAB_VELOCITY_MODE = _yarp.VOCAB_VELOCITY_MODE
VOCAB_VELOCITY_MOVE = _yarp.VOCAB_VELOCITY_MOVE
VOCAB_VELOCITY_MOVES = _yarp.VOCAB_VELOCITY_MOVES
VOCAB_E_RESET = _yarp.VOCAB_E_RESET
VOCAB_E_RESETS = _yarp.VOCAB_E_RESETS
VOCAB_ENCODER = _yarp.VOCAB_ENCODER
VOCAB_ENCODERS = _yarp.VOCAB_ENCODERS
VOCAB_ENCODER_SPEED = _yarp.VOCAB_ENCODER_SPEED
VOCAB_ENCODER_SPEEDS = _yarp.VOCAB_ENCODER_SPEEDS
VOCAB_ENCODER_ACCELERATION = _yarp.VOCAB_ENCODER_ACCELERATION
VOCAB_ENCODER_ACCELERATIONS = _yarp.VOCAB_ENCODER_ACCELERATIONS
VOCAB_AMP_ENABLE = _yarp.VOCAB_AMP_ENABLE
VOCAB_AMP_DISABLE = _yarp.VOCAB_AMP_DISABLE
VOCAB_AMP_CURRENT = _yarp.VOCAB_AMP_CURRENT
VOCAB_AMP_CURRENTS = _yarp.VOCAB_AMP_CURRENTS
VOCAB_AMP_MAXCURRENT = _yarp.VOCAB_AMP_MAXCURRENT
VOCAB_AMP_STATUS = _yarp.VOCAB_AMP_STATUS
VOCAB_LIMITS = _yarp.VOCAB_LIMITS
VOCAB_INFO_NAME = _yarp.VOCAB_INFO_NAME
VOCAB_TIMESTAMP = _yarp.VOCAB_TIMESTAMP
class Pid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Pid, name)
    __repr__ = _swig_repr
    __swig_setmethods__["kp"] = _yarp.Pid_kp_set
    __swig_getmethods__["kp"] = _yarp.Pid_kp_get
    if _newclass:kp = _swig_property(_yarp.Pid_kp_get, _yarp.Pid_kp_set)
    __swig_setmethods__["kd"] = _yarp.Pid_kd_set
    __swig_getmethods__["kd"] = _yarp.Pid_kd_get
    if _newclass:kd = _swig_property(_yarp.Pid_kd_get, _yarp.Pid_kd_set)
    __swig_setmethods__["ki"] = _yarp.Pid_ki_set
    __swig_getmethods__["ki"] = _yarp.Pid_ki_get
    if _newclass:ki = _swig_property(_yarp.Pid_ki_get, _yarp.Pid_ki_set)
    __swig_setmethods__["max_int"] = _yarp.Pid_max_int_set
    __swig_getmethods__["max_int"] = _yarp.Pid_max_int_get
    if _newclass:max_int = _swig_property(_yarp.Pid_max_int_get, _yarp.Pid_max_int_set)
    __swig_setmethods__["scale"] = _yarp.Pid_scale_set
    __swig_getmethods__["scale"] = _yarp.Pid_scale_get
    if _newclass:scale = _swig_property(_yarp.Pid_scale_get, _yarp.Pid_scale_set)
    __swig_setmethods__["max_output"] = _yarp.Pid_max_output_set
    __swig_getmethods__["max_output"] = _yarp.Pid_max_output_get
    if _newclass:max_output = _swig_property(_yarp.Pid_max_output_get, _yarp.Pid_max_output_set)
    __swig_setmethods__["offset"] = _yarp.Pid_offset_set
    __swig_getmethods__["offset"] = _yarp.Pid_offset_get
    if _newclass:offset = _swig_property(_yarp.Pid_offset_get, _yarp.Pid_offset_set)
    __swig_destroy__ = _yarp.delete_Pid
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _yarp.new_Pid(*args)
        try: self.this.append(this)
        except: self.this = this
    def setMaxInt(*args): return _yarp.Pid_setMaxInt(*args)
    def setMaxOut(*args): return _yarp.Pid_setMaxOut(*args)
Pid_swigregister = _yarp.Pid_swigregister
Pid_swigregister(Pid)

class DVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _yarp.DVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _yarp.DVector___nonzero__(*args)
    def __len__(*args): return _yarp.DVector___len__(*args)
    def pop(*args): return _yarp.DVector_pop(*args)
    def __getslice__(*args): return _yarp.DVector___getslice__(*args)
    def __setslice__(*args): return _yarp.DVector___setslice__(*args)
    def __delslice__(*args): return _yarp.DVector___delslice__(*args)
    def __delitem__(*args): return _yarp.DVector___delitem__(*args)
    def __getitem__(*args): return _yarp.DVector___getitem__(*args)
    def __setitem__(*args): return _yarp.DVector___setitem__(*args)
    def append(*args): return _yarp.DVector_append(*args)
    def empty(*args): return _yarp.DVector_empty(*args)
    def size(*args): return _yarp.DVector_size(*args)
    def clear(*args): return _yarp.DVector_clear(*args)
    def swap(*args): return _yarp.DVector_swap(*args)
    def get_allocator(*args): return _yarp.DVector_get_allocator(*args)
    def begin(*args): return _yarp.DVector_begin(*args)
    def end(*args): return _yarp.DVector_end(*args)
    def rbegin(*args): return _yarp.DVector_rbegin(*args)
    def rend(*args): return _yarp.DVector_rend(*args)
    def pop_back(*args): return _yarp.DVector_pop_back(*args)
    def erase(*args): return _yarp.DVector_erase(*args)
    def __init__(self, *args): 
        this = _yarp.new_DVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _yarp.DVector_push_back(*args)
    def front(*args): return _yarp.DVector_front(*args)
    def back(*args): return _yarp.DVector_back(*args)
    def assign(*args): return _yarp.DVector_assign(*args)
    def resize(*args): return _yarp.DVector_resize(*args)
    def insert(*args): return _yarp.DVector_insert(*args)
    def reserve(*args): return _yarp.DVector_reserve(*args)
    def capacity(*args): return _yarp.DVector_capacity(*args)
    __swig_destroy__ = _yarp.delete_DVector
    __del__ = lambda self : None;
DVector_swigregister = _yarp.DVector_swigregister
DVector_swigregister(DVector)

class PidVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PidVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PidVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _yarp.PidVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _yarp.PidVector___nonzero__(*args)
    def __len__(*args): return _yarp.PidVector___len__(*args)
    def pop(*args): return _yarp.PidVector_pop(*args)
    def __getslice__(*args): return _yarp.PidVector___getslice__(*args)
    def __setslice__(*args): return _yarp.PidVector___setslice__(*args)
    def __delslice__(*args): return _yarp.PidVector___delslice__(*args)
    def __delitem__(*args): return _yarp.PidVector___delitem__(*args)
    def __getitem__(*args): return _yarp.PidVector___getitem__(*args)
    def __setitem__(*args): return _yarp.PidVector___setitem__(*args)
    def append(*args): return _yarp.PidVector_append(*args)
    def empty(*args): return _yarp.PidVector_empty(*args)
    def size(*args): return _yarp.PidVector_size(*args)
    def clear(*args): return _yarp.PidVector_clear(*args)
    def swap(*args): return _yarp.PidVector_swap(*args)
    def get_allocator(*args): return _yarp.PidVector_get_allocator(*args)
    def begin(*args): return _yarp.PidVector_begin(*args)
    def end(*args): return _yarp.PidVector_end(*args)
    def rbegin(*args): return _yarp.PidVector_rbegin(*args)
    def rend(*args): return _yarp.PidVector_rend(*args)
    def pop_back(*args): return _yarp.PidVector_pop_back(*args)
    def erase(*args): return _yarp.PidVector_erase(*args)
    def __init__(self, *args): 
        this = _yarp.new_PidVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _yarp.PidVector_push_back(*args)
    def front(*args): return _yarp.PidVector_front(*args)
    def back(*args): return _yarp.PidVector_back(*args)
    def assign(*args): return _yarp.PidVector_assign(*args)
    def resize(*args): return _yarp.PidVector_resize(*args)
    def insert(*args): return _yarp.PidVector_insert(*args)
    def reserve(*args): return _yarp.PidVector_reserve(*args)
    def capacity(*args): return _yarp.PidVector_capacity(*args)
    __swig_destroy__ = _yarp.delete_PidVector
    __del__ = lambda self : None;
PidVector_swigregister = _yarp.PidVector_swigregister
PidVector_swigregister(PidVector)

class TypedReaderProperty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypedReaderProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TypedReaderProperty, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def setStrict(*args): return _yarp.TypedReaderProperty_setStrict(*args)
    def read(*args): return _yarp.TypedReaderProperty_read(*args)
    def interrupt(*args): return _yarp.TypedReaderProperty_interrupt(*args)
    def lastRead(*args): return _yarp.TypedReaderProperty_lastRead(*args)
    def isClosed(*args): return _yarp.TypedReaderProperty_isClosed(*args)
    def useCallback(*args): return _yarp.TypedReaderProperty_useCallback(*args)
    def disableCallback(*args): return _yarp.TypedReaderProperty_disableCallback(*args)
    def getPendingReads(*args): return _yarp.TypedReaderProperty_getPendingReads(*args)
    __swig_destroy__ = _yarp.delete_TypedReaderProperty
    __del__ = lambda self : None;
    def getName(*args): return _yarp.TypedReaderProperty_getName(*args)
    def setReplier(*args): return _yarp.TypedReaderProperty_setReplier(*args)
    def acquire(*args): return _yarp.TypedReaderProperty_acquire(*args)
    def release(*args): return _yarp.TypedReaderProperty_release(*args)
TypedReaderProperty_swigregister = _yarp.TypedReaderProperty_swigregister
TypedReaderProperty_swigregister(TypedReaderProperty)

class TypedReaderCallbackProperty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypedReaderCallbackProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TypedReaderCallbackProperty, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_TypedReaderCallbackProperty
    __del__ = lambda self : None;
    def onRead(*args): return _yarp.TypedReaderCallbackProperty_onRead(*args)
    def __init__(self, *args): 
        this = _yarp.new_TypedReaderCallbackProperty(*args)
        try: self.this.append(this)
        except: self.this = this
TypedReaderCallbackProperty_swigregister = _yarp.TypedReaderCallbackProperty_swigregister
TypedReaderCallbackProperty_swigregister(TypedReaderCallbackProperty)

class BufferedPortProperty(Contactable,TypedReaderProperty,TypedReaderCallbackProperty):
    __swig_setmethods__ = {}
    for _s in [Contactable,TypedReaderProperty,TypedReaderCallbackProperty]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BufferedPortProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [Contactable,TypedReaderProperty,TypedReaderCallbackProperty]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BufferedPortProperty, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yarp.new_BufferedPortProperty(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_BufferedPortProperty
    __del__ = lambda self : None;
    def addOutput(*args): return _yarp.BufferedPortProperty_addOutput(*args)
    def close(*args): return _yarp.BufferedPortProperty_close(*args)
    def interrupt(*args): return _yarp.BufferedPortProperty_interrupt(*args)
    def getPendingReads(*args): return _yarp.BufferedPortProperty_getPendingReads(*args)
    def where(*args): return _yarp.BufferedPortProperty_where(*args)
    def getName(*args): return _yarp.BufferedPortProperty_getName(*args)
    def prepare(*args): return _yarp.BufferedPortProperty_prepare(*args)
    def write(*args): return _yarp.BufferedPortProperty_write(*args)
    def writeStrict(*args): return _yarp.BufferedPortProperty_writeStrict(*args)
    def setStrict(*args): return _yarp.BufferedPortProperty_setStrict(*args)
    def read(*args): return _yarp.BufferedPortProperty_read(*args)
    def lastRead(*args): return _yarp.BufferedPortProperty_lastRead(*args)
    def isClosed(*args): return _yarp.BufferedPortProperty_isClosed(*args)
    def setReplier(*args): return _yarp.BufferedPortProperty_setReplier(*args)
    def onRead(*args): return _yarp.BufferedPortProperty_onRead(*args)
    def useCallback(*args): return _yarp.BufferedPortProperty_useCallback(*args)
    def disableCallback(*args): return _yarp.BufferedPortProperty_disableCallback(*args)
    def setEnvelope(*args): return _yarp.BufferedPortProperty_setEnvelope(*args)
    def getEnvelope(*args): return _yarp.BufferedPortProperty_getEnvelope(*args)
    def getInputCount(*args): return _yarp.BufferedPortProperty_getInputCount(*args)
    def getOutputCount(*args): return _yarp.BufferedPortProperty_getOutputCount(*args)
    def getReport(*args): return _yarp.BufferedPortProperty_getReport(*args)
    def setReporter(*args): return _yarp.BufferedPortProperty_setReporter(*args)
    def acquire(*args): return _yarp.BufferedPortProperty_acquire(*args)
    def release(*args): return _yarp.BufferedPortProperty_release(*args)
BufferedPortProperty_swigregister = _yarp.BufferedPortProperty_swigregister
BufferedPortProperty_swigregister(BufferedPortProperty)

class TypedReaderBottle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypedReaderBottle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TypedReaderBottle, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def setStrict(*args): return _yarp.TypedReaderBottle_setStrict(*args)
    def read(*args): return _yarp.TypedReaderBottle_read(*args)
    def interrupt(*args): return _yarp.TypedReaderBottle_interrupt(*args)
    def lastRead(*args): return _yarp.TypedReaderBottle_lastRead(*args)
    def isClosed(*args): return _yarp.TypedReaderBottle_isClosed(*args)
    def useCallback(*args): return _yarp.TypedReaderBottle_useCallback(*args)
    def disableCallback(*args): return _yarp.TypedReaderBottle_disableCallback(*args)
    def getPendingReads(*args): return _yarp.TypedReaderBottle_getPendingReads(*args)
    __swig_destroy__ = _yarp.delete_TypedReaderBottle
    __del__ = lambda self : None;
    def getName(*args): return _yarp.TypedReaderBottle_getName(*args)
    def setReplier(*args): return _yarp.TypedReaderBottle_setReplier(*args)
    def acquire(*args): return _yarp.TypedReaderBottle_acquire(*args)
    def release(*args): return _yarp.TypedReaderBottle_release(*args)
TypedReaderBottle_swigregister = _yarp.TypedReaderBottle_swigregister
TypedReaderBottle_swigregister(TypedReaderBottle)

class TypedReaderCallbackBottle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypedReaderCallbackBottle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TypedReaderCallbackBottle, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_TypedReaderCallbackBottle
    __del__ = lambda self : None;
    def onRead(*args): return _yarp.TypedReaderCallbackBottle_onRead(*args)
    def __init__(self, *args): 
        this = _yarp.new_TypedReaderCallbackBottle(*args)
        try: self.this.append(this)
        except: self.this = this
TypedReaderCallbackBottle_swigregister = _yarp.TypedReaderCallbackBottle_swigregister
TypedReaderCallbackBottle_swigregister(TypedReaderCallbackBottle)

class BufferedPortBottle(Contactable,TypedReaderBottle,BottleCallback):
    __swig_setmethods__ = {}
    for _s in [Contactable,TypedReaderBottle,BottleCallback]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BufferedPortBottle, name, value)
    __swig_getmethods__ = {}
    for _s in [Contactable,TypedReaderBottle,BottleCallback]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BufferedPortBottle, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yarp.new_BufferedPortBottle(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_BufferedPortBottle
    __del__ = lambda self : None;
    def addOutput(*args): return _yarp.BufferedPortBottle_addOutput(*args)
    def close(*args): return _yarp.BufferedPortBottle_close(*args)
    def interrupt(*args): return _yarp.BufferedPortBottle_interrupt(*args)
    def getPendingReads(*args): return _yarp.BufferedPortBottle_getPendingReads(*args)
    def where(*args): return _yarp.BufferedPortBottle_where(*args)
    def getName(*args): return _yarp.BufferedPortBottle_getName(*args)
    def prepare(*args): return _yarp.BufferedPortBottle_prepare(*args)
    def write(*args): return _yarp.BufferedPortBottle_write(*args)
    def writeStrict(*args): return _yarp.BufferedPortBottle_writeStrict(*args)
    def setStrict(*args): return _yarp.BufferedPortBottle_setStrict(*args)
    def read(*args): return _yarp.BufferedPortBottle_read(*args)
    def lastRead(*args): return _yarp.BufferedPortBottle_lastRead(*args)
    def isClosed(*args): return _yarp.BufferedPortBottle_isClosed(*args)
    def setReplier(*args): return _yarp.BufferedPortBottle_setReplier(*args)
    def onRead(*args): return _yarp.BufferedPortBottle_onRead(*args)
    def useCallback(*args): return _yarp.BufferedPortBottle_useCallback(*args)
    def disableCallback(*args): return _yarp.BufferedPortBottle_disableCallback(*args)
    def setEnvelope(*args): return _yarp.BufferedPortBottle_setEnvelope(*args)
    def getEnvelope(*args): return _yarp.BufferedPortBottle_getEnvelope(*args)
    def getInputCount(*args): return _yarp.BufferedPortBottle_getInputCount(*args)
    def getOutputCount(*args): return _yarp.BufferedPortBottle_getOutputCount(*args)
    def getReport(*args): return _yarp.BufferedPortBottle_getReport(*args)
    def setReporter(*args): return _yarp.BufferedPortBottle_setReporter(*args)
    def acquire(*args): return _yarp.BufferedPortBottle_acquire(*args)
    def release(*args): return _yarp.BufferedPortBottle_release(*args)
BufferedPortBottle_swigregister = _yarp.BufferedPortBottle_swigregister
BufferedPortBottle_swigregister(BufferedPortBottle)

class ImageRgb(Image):
    __swig_setmethods__ = {}
    for _s in [Image]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageRgb, name, value)
    __swig_getmethods__ = {}
    for _s in [Image]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageRgb, name)
    __repr__ = _swig_repr
    def getPixelSize(*args): return _yarp.ImageRgb_getPixelSize(*args)
    def getPixelCode(*args): return _yarp.ImageRgb_getPixelCode(*args)
    def pixel(*args): return _yarp.ImageRgb_pixel(*args)
    def access(*args): return _yarp.ImageRgb_access(*args)
    def safePixel(*args): return _yarp.ImageRgb_safePixel(*args)
    def __init__(self, *args): 
        this = _yarp.new_ImageRgb(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_ImageRgb
    __del__ = lambda self : None;
ImageRgb_swigregister = _yarp.ImageRgb_swigregister
ImageRgb_swigregister(ImageRgb)

class TypedReaderImageRgb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypedReaderImageRgb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TypedReaderImageRgb, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def setStrict(*args): return _yarp.TypedReaderImageRgb_setStrict(*args)
    def read(*args): return _yarp.TypedReaderImageRgb_read(*args)
    def interrupt(*args): return _yarp.TypedReaderImageRgb_interrupt(*args)
    def lastRead(*args): return _yarp.TypedReaderImageRgb_lastRead(*args)
    def isClosed(*args): return _yarp.TypedReaderImageRgb_isClosed(*args)
    def useCallback(*args): return _yarp.TypedReaderImageRgb_useCallback(*args)
    def disableCallback(*args): return _yarp.TypedReaderImageRgb_disableCallback(*args)
    def getPendingReads(*args): return _yarp.TypedReaderImageRgb_getPendingReads(*args)
    __swig_destroy__ = _yarp.delete_TypedReaderImageRgb
    __del__ = lambda self : None;
    def getName(*args): return _yarp.TypedReaderImageRgb_getName(*args)
    def setReplier(*args): return _yarp.TypedReaderImageRgb_setReplier(*args)
    def acquire(*args): return _yarp.TypedReaderImageRgb_acquire(*args)
    def release(*args): return _yarp.TypedReaderImageRgb_release(*args)
TypedReaderImageRgb_swigregister = _yarp.TypedReaderImageRgb_swigregister
TypedReaderImageRgb_swigregister(TypedReaderImageRgb)

class TypedReaderCallbackImageRgb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypedReaderCallbackImageRgb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TypedReaderCallbackImageRgb, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_TypedReaderCallbackImageRgb
    __del__ = lambda self : None;
    def onRead(*args): return _yarp.TypedReaderCallbackImageRgb_onRead(*args)
    def __init__(self, *args): 
        this = _yarp.new_TypedReaderCallbackImageRgb(*args)
        try: self.this.append(this)
        except: self.this = this
TypedReaderCallbackImageRgb_swigregister = _yarp.TypedReaderCallbackImageRgb_swigregister
TypedReaderCallbackImageRgb_swigregister(TypedReaderCallbackImageRgb)

class BufferedPortImageRgb(Contactable,TypedReaderImageRgb,TypedReaderCallbackImageRgb):
    __swig_setmethods__ = {}
    for _s in [Contactable,TypedReaderImageRgb,TypedReaderCallbackImageRgb]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BufferedPortImageRgb, name, value)
    __swig_getmethods__ = {}
    for _s in [Contactable,TypedReaderImageRgb,TypedReaderCallbackImageRgb]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BufferedPortImageRgb, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yarp.new_BufferedPortImageRgb(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_BufferedPortImageRgb
    __del__ = lambda self : None;
    def addOutput(*args): return _yarp.BufferedPortImageRgb_addOutput(*args)
    def close(*args): return _yarp.BufferedPortImageRgb_close(*args)
    def interrupt(*args): return _yarp.BufferedPortImageRgb_interrupt(*args)
    def getPendingReads(*args): return _yarp.BufferedPortImageRgb_getPendingReads(*args)
    def where(*args): return _yarp.BufferedPortImageRgb_where(*args)
    def getName(*args): return _yarp.BufferedPortImageRgb_getName(*args)
    def prepare(*args): return _yarp.BufferedPortImageRgb_prepare(*args)
    def write(*args): return _yarp.BufferedPortImageRgb_write(*args)
    def writeStrict(*args): return _yarp.BufferedPortImageRgb_writeStrict(*args)
    def setStrict(*args): return _yarp.BufferedPortImageRgb_setStrict(*args)
    def read(*args): return _yarp.BufferedPortImageRgb_read(*args)
    def lastRead(*args): return _yarp.BufferedPortImageRgb_lastRead(*args)
    def isClosed(*args): return _yarp.BufferedPortImageRgb_isClosed(*args)
    def setReplier(*args): return _yarp.BufferedPortImageRgb_setReplier(*args)
    def onRead(*args): return _yarp.BufferedPortImageRgb_onRead(*args)
    def useCallback(*args): return _yarp.BufferedPortImageRgb_useCallback(*args)
    def disableCallback(*args): return _yarp.BufferedPortImageRgb_disableCallback(*args)
    def setEnvelope(*args): return _yarp.BufferedPortImageRgb_setEnvelope(*args)
    def getEnvelope(*args): return _yarp.BufferedPortImageRgb_getEnvelope(*args)
    def getInputCount(*args): return _yarp.BufferedPortImageRgb_getInputCount(*args)
    def getOutputCount(*args): return _yarp.BufferedPortImageRgb_getOutputCount(*args)
    def getReport(*args): return _yarp.BufferedPortImageRgb_getReport(*args)
    def setReporter(*args): return _yarp.BufferedPortImageRgb_setReporter(*args)
    def acquire(*args): return _yarp.BufferedPortImageRgb_acquire(*args)
    def release(*args): return _yarp.BufferedPortImageRgb_release(*args)
BufferedPortImageRgb_swigregister = _yarp.BufferedPortImageRgb_swigregister
BufferedPortImageRgb_swigregister(BufferedPortImageRgb)

class ImageFloat(Image):
    __swig_setmethods__ = {}
    for _s in [Image]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [Image]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageFloat, name)
    __repr__ = _swig_repr
    def getPixelSize(*args): return _yarp.ImageFloat_getPixelSize(*args)
    def getPixelCode(*args): return _yarp.ImageFloat_getPixelCode(*args)
    def pixel(*args): return _yarp.ImageFloat_pixel(*args)
    def access(*args): return _yarp.ImageFloat_access(*args)
    def safePixel(*args): return _yarp.ImageFloat_safePixel(*args)
    def getPixel(*args): return _yarp.ImageFloat_getPixel(*args)
    def setPixel(*args): return _yarp.ImageFloat_setPixel(*args)
    def __init__(self, *args): 
        this = _yarp.new_ImageFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_ImageFloat
    __del__ = lambda self : None;
ImageFloat_swigregister = _yarp.ImageFloat_swigregister
ImageFloat_swigregister(ImageFloat)

class TypedReaderImageFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypedReaderImageFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TypedReaderImageFloat, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def setStrict(*args): return _yarp.TypedReaderImageFloat_setStrict(*args)
    def read(*args): return _yarp.TypedReaderImageFloat_read(*args)
    def interrupt(*args): return _yarp.TypedReaderImageFloat_interrupt(*args)
    def lastRead(*args): return _yarp.TypedReaderImageFloat_lastRead(*args)
    def isClosed(*args): return _yarp.TypedReaderImageFloat_isClosed(*args)
    def useCallback(*args): return _yarp.TypedReaderImageFloat_useCallback(*args)
    def disableCallback(*args): return _yarp.TypedReaderImageFloat_disableCallback(*args)
    def getPendingReads(*args): return _yarp.TypedReaderImageFloat_getPendingReads(*args)
    __swig_destroy__ = _yarp.delete_TypedReaderImageFloat
    __del__ = lambda self : None;
    def getName(*args): return _yarp.TypedReaderImageFloat_getName(*args)
    def setReplier(*args): return _yarp.TypedReaderImageFloat_setReplier(*args)
    def acquire(*args): return _yarp.TypedReaderImageFloat_acquire(*args)
    def release(*args): return _yarp.TypedReaderImageFloat_release(*args)
TypedReaderImageFloat_swigregister = _yarp.TypedReaderImageFloat_swigregister
TypedReaderImageFloat_swigregister(TypedReaderImageFloat)

class TypedReaderCallbackImageFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypedReaderCallbackImageFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TypedReaderCallbackImageFloat, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_TypedReaderCallbackImageFloat
    __del__ = lambda self : None;
    def onRead(*args): return _yarp.TypedReaderCallbackImageFloat_onRead(*args)
    def __init__(self, *args): 
        this = _yarp.new_TypedReaderCallbackImageFloat(*args)
        try: self.this.append(this)
        except: self.this = this
TypedReaderCallbackImageFloat_swigregister = _yarp.TypedReaderCallbackImageFloat_swigregister
TypedReaderCallbackImageFloat_swigregister(TypedReaderCallbackImageFloat)

class BufferedPortImageFloat(Contactable,TypedReaderImageFloat,TypedReaderCallbackImageFloat):
    __swig_setmethods__ = {}
    for _s in [Contactable,TypedReaderImageFloat,TypedReaderCallbackImageFloat]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BufferedPortImageFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [Contactable,TypedReaderImageFloat,TypedReaderCallbackImageFloat]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BufferedPortImageFloat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yarp.new_BufferedPortImageFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_BufferedPortImageFloat
    __del__ = lambda self : None;
    def addOutput(*args): return _yarp.BufferedPortImageFloat_addOutput(*args)
    def close(*args): return _yarp.BufferedPortImageFloat_close(*args)
    def interrupt(*args): return _yarp.BufferedPortImageFloat_interrupt(*args)
    def getPendingReads(*args): return _yarp.BufferedPortImageFloat_getPendingReads(*args)
    def where(*args): return _yarp.BufferedPortImageFloat_where(*args)
    def getName(*args): return _yarp.BufferedPortImageFloat_getName(*args)
    def prepare(*args): return _yarp.BufferedPortImageFloat_prepare(*args)
    def write(*args): return _yarp.BufferedPortImageFloat_write(*args)
    def writeStrict(*args): return _yarp.BufferedPortImageFloat_writeStrict(*args)
    def setStrict(*args): return _yarp.BufferedPortImageFloat_setStrict(*args)
    def read(*args): return _yarp.BufferedPortImageFloat_read(*args)
    def lastRead(*args): return _yarp.BufferedPortImageFloat_lastRead(*args)
    def isClosed(*args): return _yarp.BufferedPortImageFloat_isClosed(*args)
    def setReplier(*args): return _yarp.BufferedPortImageFloat_setReplier(*args)
    def onRead(*args): return _yarp.BufferedPortImageFloat_onRead(*args)
    def useCallback(*args): return _yarp.BufferedPortImageFloat_useCallback(*args)
    def disableCallback(*args): return _yarp.BufferedPortImageFloat_disableCallback(*args)
    def setEnvelope(*args): return _yarp.BufferedPortImageFloat_setEnvelope(*args)
    def getEnvelope(*args): return _yarp.BufferedPortImageFloat_getEnvelope(*args)
    def getInputCount(*args): return _yarp.BufferedPortImageFloat_getInputCount(*args)
    def getOutputCount(*args): return _yarp.BufferedPortImageFloat_getOutputCount(*args)
    def getReport(*args): return _yarp.BufferedPortImageFloat_getReport(*args)
    def setReporter(*args): return _yarp.BufferedPortImageFloat_setReporter(*args)
    def acquire(*args): return _yarp.BufferedPortImageFloat_acquire(*args)
    def release(*args): return _yarp.BufferedPortImageFloat_release(*args)
BufferedPortImageFloat_swigregister = _yarp.BufferedPortImageFloat_swigregister
BufferedPortImageFloat_swigregister(BufferedPortImageFloat)



