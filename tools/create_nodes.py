#! /usr/bin/python3

import sys
import shutil
import os.path as path
import configparser

cfg = configparser.ConfigParser(allow_no_value=True)
cfg.optionxform = lambda x : x

def configBoolean(section='global', property='time', default=False):
    try:
        p = cfg.getboolean(section, property, fallback=default)
    except AttributeError:
        p = True
    return p

def create_node(node):
    node_script = "### Game Properties ###\n"
    ### Game properties
    if configBoolean(property='debug'):
        node_script += "bpy.data.scenes[0].game_settings.show_debug_properties = True\n"
    if configBoolean(property='profile'):
        node_script += "bpy.data.scenes[0].game_settings.show_framerate_profile = True\n"
    ### Script: HLA Empty part
    node_script += "\n### HLA Section ###\n"
    node_script += "hla = Middleware('hla_empty')\n"
    node_script += "hla.properties(Federate='" + node + "')\n"
    try:
        host = cfg['global']['host']
        node_script += "hla.properties(CERTI_HOST='" + host + "')\n"
    except:
        pass
    try:
        proxy = cfg['global']['proxy']
        node_script += "hla.properties(CERTI_HTTP_PROXY='" + proxy + "')\n"
    except:
        pass
    node_script += "hla.properties(TimeRegulation=" + str(configBoolean(property='time')) + ")\n"
    ### Get list of robots managed by this node
    robots = []
    for r in cfg[node]:
        if configBoolean(section=node, property=r, default=True):
            robots.append(r)
    ### Script: robot management part
    node_script += "robots = " + str(robots) + "\n"
    node_script += "for obj in bpy.data.objects:\n"
    node_script += "    p = obj.game.properties\n"
    node_script += "    if obj.name in robots:\n"
    node_script += "        if not 'Robot_Tag' in p:\n"
    node_script += "            raise Exception(obj + ' is not a robot!')\n"
    node_script += "    else:\n"
    node_script += "        if 'Robot_Tag' in p:\n"
    node_script += "            p['Robot_Tag'].name = 'External_Robot_Tag'\n"
    ### Finished
    return node_script
    
def main(argv):
    # Read config file
    cfg.read(argv[0])
    # Check script file existence
    filename = argv[1][0:-3]
    if not (path.exists(argv[1]) and argv[1][-3:] == '.py'):
        raise Exception("Script file " + argv[1] + " does not exist or is not a '.py' file")
    # For each node, create a scenario script.
    for node in cfg.sections() :
        if node == 'global':
            continue
        # This script includes the original scenario file and add HLA specific commands.
        hla_script = create_node(node)
        # Generate the file
        fname = filename + "_" + node + ".py"
        #shutil.copyfile(argv[1], fname)
        f = open(fname, 'w')
        f.write("##### " + fname + " #####\n")
        f.write("""### This file has been automatically generated by 'create_nodes'
### and correspond to a node scenario in a Morse multinode simulation.
### Edit with care!
###
""")
        f.write("from " + filename + " import *\n\n")
        f.write(hla_script)
        f.close()

def usage():
    print("""
    This script will parse a Morse multinode configuration file as well as 
    a scenario script and will produce a set of elementary files to be executed
    on different simulation nodes.
    Usage: create_nodes <config_file> <scenario_script>
    """)

if __name__ == "__main__":
    if len(sys.argv) != 3 :
        usage()
    else :
        main(sys.argv[1:])