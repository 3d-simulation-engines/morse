General TODO list for MORSE
---------------------------

File history:
27/04/2010 - Arnaud + Severin: long list of things to do after the first 6 months of MORSE development
29/04/2010 - Arnaud + Severin: mark with a * things needed for release v0.1
03/05/2010 - Simon: added a "section" related to the management of the frame transformations
04/05/2010 - Arnaud + Severin + Nicolas + Gilberto: review of the list, with aims at a first release
28/05/2010 - Arnaud + Severin: update after "CMake operation"
14/06/2010 - Gilberto: Remove completed tasks
26/08/2010 - Gilberto: Add pending tasks for sensors, documentation and the Rosace scenario
17/09/2010 - Severin: Bring up the list of features required for the next, human interaction oriented, release
22/11/2010 - Severin: update of the TODO list before 0.2a1 tag, created a preliminary list of target for 0.3
04/01/2011 - Severin: update of the TODO list before 0.2b1 tag
19/01/2011 - Severin: updated before morse-0.2 release
03/02/2011 - Severin: updated for morse-0.3 and morse-0.4 targets
03/02/2011 - Severin: added some items from LAAS users feedback
15/03/2011 - Simon: more on targets for 0.4 release
28/03/2011 - Severin: targets for 0.3 are almost cleared
---

=========================
 TARGETS FOR RELEASE 0.3
=========================

Middlewares
-----------

- Requests: ensure some working control of the simulation
  based on the socket interface (restart,...)

=========================
 TARGETS FOR RELEASE 0.4
=========================

General
-------

- use the Python logging interface
- add an overlay in the simulation with the keyboard shortcuts
- move away all project/scenario specific files from MORSE core (create
  dedicated repositories for those)
- allow scenarii described in Python instead of Blender files


Middlewares
-----------

- add support for services through ROS and Pocolibs middleware
- ROS support for the robot's cameras
- Split the pom_poster from Viam and Velodyne

Architecture
------------

- make clear how components access other components? (eg: the cameras need the
  position of the robot)
- correct the bounding boxes and physics properties of robots
- define a method to select the control of robots using position or velocity

Simulation supervision
----------------------

- Introduce a mean to externally control time, by pacing the game engine time
  (e.g. through a socket, cf mail from Benoit Bolsee on Jan. the 10th in
  blender-robotics). Add support to pause the simulation.
- Multi-engine distributed simulation: define the procotol that allows to
  dispatch various robots on several machines running blender, while maintaining
  the world state consistent within these machines.
- Introduce means to define scenarios with controlled dynamic events (through
  requests and/or a simple scripting API) 

GUI
---

- Add a GUI for a the scenario configuration
- Define a user interface to specify a scenario
- Split the .blend file into scene / robot files

Components
----------

- Motion capture poster: MORSE should be able to simulate a motion capture setup
by allowing the designer to paste markers in the scene whose position will be
exported

- "Point Cloud" sensors: generate 3D depth images to simulate either
stereovision at an abstract level or various Lidars. Make it generic: export
depth data (openGL z-buffer?), define mofifiers that sample the data according
to a given sensor geometry.

- Properly implement the "human" as a robot: Change the script in object oriented form

================
 OTHERS and MISC
================

Coding style
------------

- every simple function must have a function comment ( """ ... """)
- Change the names of modules, variables, classes, etc. to comply with the
  naming conventions in: http://www.python.org/dev/peps/pep-0008/
- Change the names of objects in .blend file, so that they can be dynamically added using a Python script. Give Specific prefixes to the parent component and other linkable objects

Frame transformations
---------------------

- Representation of all the frames defined within a robot (one frame per sensor,
  one robot frame). 
- Geo-referenced frames for initial geographic data (define and store a frame
  transformation between the Blender reference frame and an abosolute
  geo-reference frame)
- Camera geometry: associate a projection matrix to each camera
- Respect the usual standards (e.g. for cameras), define and document the other
  choices

User-interface
--------------
- Graphic tree of logic components and their interaction (no meshes, ... )

Architecture
------------
- unified time management ("what if we want to simulate at 2X?")

Simulated component
-------------------
- Simulation of wireless communication between robots: delay, lost of connection, noise...

Linking issues
--------------
- when properties are added in linked components (eg, cameras),
the new properties don't show up in the scene that import these components.

- A lot of room for improvement regarding the general process of linking a robot
component into a scene. Issue with making stuff 'local', lacking a good GUI, when
opening a .blend file, it's not clear what should be imported...

Other stuff 
-----------
- Create a list with the comparison against Gazebo, and why MORSE is better/worse in particular situations

- find a way to limit the framerate of the simulation, without lowering the physics clock (only the display).
  This would allow to free CPU for other application while the simulator is running.
- commit policy

Rosace Project
--------------
- Add timeline of events in the simulation
- Add init script that places the robots and victims specified in a XML file

