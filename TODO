General TODO list for MORSE
---------------------------

File history:
27/04/2010 - Arnaud + Severin: long list of things to do after the first 6 months of MORSE development
29/04/2010 - Arnaud + Severin: mark with a * things needed for release v0.1
03/05/2010 - Simon: added a "section" related to the management of the frame transformations
04/05/2010 - Arnaud + Severin + Nicolas + Gilberto: review of the list, with aims at a first release
28/05/2010 - Arnaud + Severin: update after "CMake operation"
14/06/2010 - Gilberto: Remove completed tasks
26/08/2010 - Gilberto: Add pending tasks for sensors, documentation and the Rosace scenario
17/09/2010 - Severin: Bring up the list of features required for the next, human interaction oriented, release
---

=========================================================
 TARGETS FOR RELEASE 0.2 - The Human Interaction release
=========================================================

User-interface
--------------
- [ONGOING] Ability to fully control a robot or a human as "first
  person shooter" to interact with other robots
    - Ability to control a human with mouse + keyboard (turning head, moving around, sitting down)
    - Ability to pick/release objects by clicking on them

Middlewares
-----------
- Requests: be sure that components can be remotely (ie by clients) configured

Components
----------

- [ONGOING] Arm control: support setting the position of the PA-10 arm by reading a set of 6 angles (commit 77700c258d2a)
- Arm control: support setting the position of two KUKA LWR arms by reading
a set of 14 angles (7 per arm)
- Animated human export: MORSE should export the complete armature of the human
- Motion capture poster: MORSE should be able to simulate a motion capture setup
by allowing the designer to paste markers in the scene whose position will be exported
- Viman-like sensor: MORSE should be able to export position, orientation, name 
of marked objects.


===============
 LATER TARGETS
===============

Code organisation
-----------------
[DEFERRED] - One repo for scenarii (morse-scenarii.git)

Architecture
------------
- how components access other components? (eg: the cameras need the position of the robot)
- unified time management ("what if we want to simulate at 2X?")

User-interface
--------------
- Graphic tree of logic components and their interaction (no meshes, ... )
   
Linking issues
--------------
- when properties are added in linked components (eg, cameras),
the new properties don't show up in the scene that import these components.

Coding style
------------
- code everything in Python 3 compatible Python
- Replace all "print" by the Python logging interface
- every simple function must have a function comment ( """ ... """) + setup the
  documentation to be generated
- Change the names of modules, variables, classes, etc. to comply with the
  naming conventions in: http://www.python.org/dev/peps/pep-0008/

Frame transformations
-----------

- Representation of all the frames defined within a robot (one frame per sensor,
  one robot frame). 
- Geo-referenced frames for initial geographic data (define and store a frame
  transformation between the Blender reference frame and an abosolute
  geo-reference frame)
- Camera geometry: associate a projection matrix to each camera
- Respect the usual standards (e.g. for cameras), define and document the other
  choices

Other stuff 
-----------
- commit policy
- Blender 2.5


Components
----------
- Waypoint controller
- SICK poster

Rosace Project
--------------
- Add timeline of events in the simulation
- Add init script that places the robots and victims specified in a XML file

Documentation
-------------
- Add a mention about the different install directory used for python scripts in Debian
dist-packages instead of site-packages
